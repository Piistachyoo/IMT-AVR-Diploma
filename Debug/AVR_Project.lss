
AVR_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003d78  00003dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003a14  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001780  00000000  00000000  00007820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000ae99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000cb34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000cc94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000cf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__vector_1>
       8:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_2>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <main>
      7a:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GIE_vEnableInterrupts>:
/*************************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
     b3e:	af e5       	ldi	r26, 0x5F	; 95
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ef e5       	ldi	r30, 0x5F	; 95
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	8c 93       	st	X, r24
}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	8c 93       	st	X, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <EXTI_vInit>:
/*************************************************************************/

#include "EXTI_interface.h"

// This function shall be responsible for initializing external interrupts
void EXTI_vInit(void){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
/********************* SELECTING ACTIVATION SENSOR FOR EXTI0 *********************/
#if EXTI_INTERRUPT == EXTI0_PIN
#if EXTI_ACTIVATION_SENSE == EXTI0_LOW_ACTIVATION
	MCUCR_REG &= EXTI0_RESET_ACTIVATION;
     b76:	a5 e5       	ldi	r26, 0x55	; 85
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e5 e5       	ldi	r30, 0x55	; 85
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8c 7f       	andi	r24, 0xFC	; 252
     b82:	8c 93       	st	X, r24
	MCUCR_REG |= EXTI0_LOW_ACTIVATION;
     b84:	a5 e5       	ldi	r26, 0x55	; 85
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e5 e5       	ldi	r30, 0x55	; 85
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8c 93       	st	X, r24
	SET_BIT(GICR_REG, EXTI0_PIN);
     b90:	ab e5       	ldi	r26, 0x5B	; 91
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	eb e5       	ldi	r30, 0x5B	; 91
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	8c 93       	st	X, r24
	MCUCSR_REG &= EXTI2_RESET_ACTIVATION;
#elif EXTI_ACTIVATION_SENSE == EXTI2_RISING_ACTIVATION
	MCUCSR_REG |= EXTI2_RISING_ACTIVATION;
#endif
#endif
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <EXTI_vDisableInterrupt>:

// This function shall be responsible for disabling external interrupts
void EXTI_vDisableInterrupt(void){
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62

}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <EXTI_vEnablePin>:



// This function shall be responsible for enabling any interrupt pin with any activation sensing
void EXTI_vEnablePin(u8 Copy_u8PinName){
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <EXTI_vEnablePin+0x6>
     bb8:	0f 92       	push	r0
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3b 83       	std	Y+3, r19	; 0x03
     bc8:	2a 83       	std	Y+2, r18	; 0x02
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	9b 81       	ldd	r25, Y+3	; 0x03
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	31 f0       	breq	.+12     	; 0xbde <EXTI_vEnablePin+0x2c>
     bd2:	2a 81       	ldd	r18, Y+2	; 0x02
     bd4:	3b 81       	ldd	r19, Y+3	; 0x03
     bd6:	21 30       	cpi	r18, 0x01	; 1
     bd8:	31 05       	cpc	r19, r1
     bda:	b9 f0       	breq	.+46     	; 0xc0a <EXTI_vEnablePin+0x58>
     bdc:	2b c0       	rjmp	.+86     	; 0xc34 <EXTI_vEnablePin+0x82>
	{
	case INT0_PIN:
#if ActivationSense == LOW_ACTIVATION
		CLR_BIT(MCUCR_REG, 0); CLR_BIT(MCUCR_REG, 1); SET_BIT(GICR_REG, EXTI0_PIN);
     bde:	a5 e5       	ldi	r26, 0x55	; 85
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e5 e5       	ldi	r30, 0x55	; 85
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	8c 93       	st	X, r24
     bec:	a5 e5       	ldi	r26, 0x55	; 85
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e5 e5       	ldi	r30, 0x55	; 85
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8d 7f       	andi	r24, 0xFD	; 253
     bf8:	8c 93       	st	X, r24
     bfa:	ab e5       	ldi	r26, 0x5B	; 91
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	eb e5       	ldi	r30, 0x5B	; 91
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
     c08:	15 c0       	rjmp	.+42     	; 0xc34 <EXTI_vEnablePin+0x82>
#endif
		break;

	case INT1_PIN:
#if ActivationSense == LOW_ACTIVATION
		CLR_BIT(MCUCR_REG, 2); CLR_BIT(MCUCR_REG, 3); SET_BIT(GICR_REG, EXTI1_PIN);
     c0a:	a5 e5       	ldi	r26, 0x55	; 85
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e5 e5       	ldi	r30, 0x55	; 85
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8b 7f       	andi	r24, 0xFB	; 251
     c16:	8c 93       	st	X, r24
     c18:	a5 e5       	ldi	r26, 0x55	; 85
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e5 e5       	ldi	r30, 0x55	; 85
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	8c 93       	st	X, r24
     c26:	ab e5       	ldi	r26, 0x5B	; 91
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	eb e5       	ldi	r30, 0x5B	; 91
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	8c 93       	st	X, r24
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCSR_REG, 6); SET_BIT(GICR_REG,EXTI2_PIN);
#endif
		break;
	}
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <EXTI_vDisablePin>:

// This function shall be responsible for enabling any interrupt pin
void EXTI_vDisablePin(u8 Copy_u8PinName){
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <EXTI_vDisablePin+0x6>
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3b 83       	std	Y+3, r19	; 0x03
     c56:	2a 83       	std	Y+2, r18	; 0x02
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	9b 81       	ldd	r25, Y+3	; 0x03
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	89 f0       	breq	.+34     	; 0xc84 <EXTI_vDisablePin+0x44>
     c62:	2a 81       	ldd	r18, Y+2	; 0x02
     c64:	3b 81       	ldd	r19, Y+3	; 0x03
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	a1 f0       	breq	.+40     	; 0xc94 <EXTI_vDisablePin+0x54>
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	b9 f4       	brne	.+46     	; 0xca2 <EXTI_vDisablePin+0x62>
	{
	case INT0_PIN: CLR_BIT(GICR_REG, EXTI0_PIN); break;
     c74:	ab e5       	ldi	r26, 0x5B	; 91
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	eb e5       	ldi	r30, 0x5B	; 91
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7b       	andi	r24, 0xBF	; 191
     c80:	8c 93       	st	X, r24
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <EXTI_vDisablePin+0x62>
	case INT1_PIN: CLR_BIT(GICR_REG, EXTI1_PIN); break;
     c84:	ab e5       	ldi	r26, 0x5B	; 91
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	eb e5       	ldi	r30, 0x5B	; 91
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 77       	andi	r24, 0x7F	; 127
     c90:	8c 93       	st	X, r24
     c92:	07 c0       	rjmp	.+14     	; 0xca2 <EXTI_vDisablePin+0x62>
	case INT2_PIN: CLR_BIT(GICR_REG, EXTI2_PIN); break;
     c94:	ab e5       	ldi	r26, 0x5B	; 91
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	eb e5       	ldi	r30, 0x5B	; 91
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 7d       	andi	r24, 0xDF	; 223
     ca0:	8c 93       	st	X, r24
	}
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DIO_vSetPinDir>:

#include "DIO_interface.h"


//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	27 97       	sbiw	r28, 0x07	; 7
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	6a 83       	std	Y+2, r22	; 0x02
     cc6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <DIO_vSetPinDir+0x22>
     cce:	6f c0       	rjmp	.+222    	; 0xdae <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3f 83       	std	Y+7, r19	; 0x07
     cd8:	2e 83       	std	Y+6, r18	; 0x06
     cda:	8e 81       	ldd	r24, Y+6	; 0x06
     cdc:	9f 81       	ldd	r25, Y+7	; 0x07
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	49 f1       	breq	.+82     	; 0xd36 <DIO_vSetPinDir+0x88>
     ce4:	2e 81       	ldd	r18, Y+6	; 0x06
     ce6:	3f 81       	ldd	r19, Y+7	; 0x07
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <DIO_vSetPinDir+0x4a>
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	61 f0       	breq	.+24     	; 0xd0e <DIO_vSetPinDir+0x60>
     cf6:	d2 c0       	rjmp	.+420    	; 0xe9c <DIO_vSetPinDir+0x1ee>
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	3f 81       	ldd	r19, Y+7	; 0x07
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	71 f1       	breq	.+92     	; 0xd5e <DIO_vSetPinDir+0xb0>
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	91 05       	cpc	r25, r1
     d0a:	e9 f1       	breq	.+122    	; 0xd86 <DIO_vSetPinDir+0xd8>
     d0c:	c7 c0       	rjmp	.+398    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vSetPinDir+0x7e>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vSetPinDir+0x7a>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	b3 c0       	rjmp	.+358    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
     d36:	a7 e3       	ldi	r26, 0x37	; 55
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e3       	ldi	r30, 0x37	; 55
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_vSetPinDir+0xa6>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_vSetPinDir+0xa2>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	9f c0       	rjmp	.+318    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
     d5e:	a4 e3       	ldi	r26, 0x34	; 52
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e3       	ldi	r30, 0x34	; 52
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_vSetPinDir+0xce>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_vSetPinDir+0xca>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	8b c0       	rjmp	.+278    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_vSetPinDir+0xf6>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_vSetPinDir+0xf2>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	77 c0       	rjmp	.+238    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	88 23       	and	r24, r24
     db2:	09 f0       	breq	.+2      	; 0xdb6 <DIO_vSetPinDir+0x108>
     db4:	73 c0       	rjmp	.+230    	; 0xe9c <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3d 83       	std	Y+5, r19	; 0x05
     dbe:	2c 83       	std	Y+4, r18	; 0x04
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	59 f1       	breq	.+86     	; 0xe20 <DIO_vSetPinDir+0x172>
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <DIO_vSetPinDir+0x130>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f0       	breq	.+26     	; 0xdf6 <DIO_vSetPinDir+0x148>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <DIO_vSetPinDir+0x1ee>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	89 f1       	breq	.+98     	; 0xe4a <DIO_vSetPinDir+0x19c>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <DIO_vSetPinDir+0x146>
     df2:	40 c0       	rjmp	.+128    	; 0xe74 <DIO_vSetPinDir+0x1c6>
     df4:	53 c0       	rjmp	.+166    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
     df6:	aa e3       	ldi	r26, 0x3A	; 58
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_vSetPinDir+0x166>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_vSetPinDir+0x162>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	3e c0       	rjmp	.+124    	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_vSetPinDir+0x190>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_vSetPinDir+0x18c>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	29 c0       	rjmp	.+82     	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_vSetPinDir+0x1ba>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_vSetPinDir+0x1b6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_vSetPinDir+0x1e4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_vSetPinDir+0x1e0>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
		}
	}
}
     e9c:	27 96       	adiw	r28, 0x07	; 7
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	27 97       	sbiw	r28, 0x07	; 7
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	09 f0       	breq	.+2      	; 0xed0 <DIO_vSetPinValue+0x22>
     ece:	6f c0       	rjmp	.+222    	; 0xfae <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f 83       	std	Y+7, r19	; 0x07
     ed8:	2e 83       	std	Y+6, r18	; 0x06
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	49 f1       	breq	.+82     	; 0xf36 <DIO_vSetPinValue+0x88>
     ee4:	2e 81       	ldd	r18, Y+6	; 0x06
     ee6:	3f 81       	ldd	r19, Y+7	; 0x07
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <DIO_vSetPinValue+0x4a>
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	61 f0       	breq	.+24     	; 0xf0e <DIO_vSetPinValue+0x60>
     ef6:	d2 c0       	rjmp	.+420    	; 0x109c <DIO_vSetPinValue+0x1ee>
     ef8:	2e 81       	ldd	r18, Y+6	; 0x06
     efa:	3f 81       	ldd	r19, Y+7	; 0x07
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	71 f1       	breq	.+92     	; 0xf5e <DIO_vSetPinValue+0xb0>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	e9 f1       	breq	.+122    	; 0xf86 <DIO_vSetPinValue+0xd8>
     f0c:	c7 c0       	rjmp	.+398    	; 0x109c <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_vSetPinValue+0x7e>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_vSetPinValue+0x7a>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	b3 c0       	rjmp	.+358    	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
     f36:	a8 e3       	ldi	r26, 0x38	; 56
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 e3       	ldi	r30, 0x38	; 56
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_vSetPinValue+0xa6>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_vSetPinValue+0xa2>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	9f c0       	rjmp	.+318    	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
     f5e:	a5 e3       	ldi	r26, 0x35	; 53
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e3       	ldi	r30, 0x35	; 53
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_vSetPinValue+0xce>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_vSetPinValue+0xca>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	8b c0       	rjmp	.+278    	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_vSetPinValue+0xf6>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_vSetPinValue+0xf2>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	77 c0       	rjmp	.+238    	; 0x109c <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	88 23       	and	r24, r24
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <DIO_vSetPinValue+0x108>
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_vSetPinValue+0x172>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <DIO_vSetPinValue+0x130>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_vSetPinValue+0x148>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <DIO_vSetPinValue+0x1ee>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_vSetPinValue+0x19c>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_vSetPinValue+0x146>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_vSetPinValue+0x1c6>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_vSetPinValue+0x166>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_vSetPinValue+0x162>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_vSetPinValue+0x190>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_vSetPinValue+0x18c>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_vSetPinValue+0x1ba>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_vSetPinValue+0x1b6>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_vSetPinValue+0x1e4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_vSetPinValue+0x1e0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
		}
	}
}
    109c:	27 96       	adiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8ReadPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_u8ReadPinValue+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    10c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3d 83       	std	Y+5, r19	; 0x05
    10ca:	2c 83       	std	Y+4, r18	; 0x04
    10cc:	4c 81       	ldd	r20, Y+4	; 0x04
    10ce:	5d 81       	ldd	r21, Y+5	; 0x05
    10d0:	41 30       	cpi	r20, 0x01	; 1
    10d2:	51 05       	cpc	r21, r1
    10d4:	41 f1       	breq	.+80     	; 0x1126 <DIO_u8ReadPinValue+0x78>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	91 05       	cpc	r25, r1
    10de:	34 f4       	brge	.+12     	; 0x10ec <DIO_u8ReadPinValue+0x3e>
    10e0:	2c 81       	ldd	r18, Y+4	; 0x04
    10e2:	3d 81       	ldd	r19, Y+5	; 0x05
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	61 f0       	breq	.+24     	; 0x1102 <DIO_u8ReadPinValue+0x54>
    10ea:	52 c0       	rjmp	.+164    	; 0x1190 <DIO_u8ReadPinValue+0xe2>
    10ec:	4c 81       	ldd	r20, Y+4	; 0x04
    10ee:	5d 81       	ldd	r21, Y+5	; 0x05
    10f0:	42 30       	cpi	r20, 0x02	; 2
    10f2:	51 05       	cpc	r21, r1
    10f4:	51 f1       	breq	.+84     	; 0x114a <DIO_u8ReadPinValue+0x9c>
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	b9 f1       	breq	.+110    	; 0x116e <DIO_u8ReadPinValue+0xc0>
    1100:	47 c0       	rjmp	.+142    	; 0x1190 <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    1102:	e9 e3       	ldi	r30, 0x39	; 57
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8ReadPinValue+0x6c>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8ReadPinValue+0x68>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	35 c0       	rjmp	.+106    	; 0x1190 <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    1126:	e6 e3       	ldi	r30, 0x36	; 54
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8ReadPinValue+0x90>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8ReadPinValue+0x8c>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	23 c0       	rjmp	.+70     	; 0x1190 <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    114a:	e3 e3       	ldi	r30, 0x33	; 51
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8ReadPinValue+0xb4>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_u8ReadPinValue+0xb0>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	11 c0       	rjmp	.+34     	; 0x1190 <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    116e:	e0 e3       	ldi	r30, 0x30	; 48
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8ReadPinValue+0xd8>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8ReadPinValue+0xd4>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_vSetGroupDir+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_vSetGroupDir+0x8>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <DIO_vSetGroupDir+0xa>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	99 f5       	brne	.+102    	; 0x1220 <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3e 83       	std	Y+6, r19	; 0x06
    11c2:	2d 83       	std	Y+5, r18	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	d1 f0       	breq	.+52     	; 0x1202 <DIO_vSetGroupDir+0x60>
    11ce:	2d 81       	ldd	r18, Y+5	; 0x05
    11d0:	3e 81       	ldd	r19, Y+6	; 0x06
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <DIO_vSetGroupDir+0x40>
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	61 f0       	breq	.+24     	; 0x11f8 <DIO_vSetGroupDir+0x56>
    11e0:	50 c0       	rjmp	.+160    	; 0x1282 <DIO_vSetGroupDir+0xe0>
    11e2:	2d 81       	ldd	r18, Y+5	; 0x05
    11e4:	3e 81       	ldd	r19, Y+6	; 0x06
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	81 f0       	breq	.+32     	; 0x120c <DIO_vSetGroupDir+0x6a>
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <DIO_vSetGroupDir+0x74>
    11f6:	45 c0       	rjmp	.+138    	; 0x1282 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    11f8:	ea e3       	ldi	r30, 0x3A	; 58
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	80 83       	st	Z, r24
    1200:	40 c0       	rjmp	.+128    	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    1202:	e7 e3       	ldi	r30, 0x37	; 55
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	80 83       	st	Z, r24
    120a:	3b c0       	rjmp	.+118    	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    120c:	e4 e3       	ldi	r30, 0x34	; 52
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	80 83       	st	Z, r24
    1214:	36 c0       	rjmp	.+108    	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    1216:	e1 e3       	ldi	r30, 0x31	; 49
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 83       	st	Z, r24
    121e:	31 c0       	rjmp	.+98     	; 0x1282 <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 23       	and	r24, r24
    1224:	71 f5       	brne	.+92     	; 0x1282 <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3c 83       	std	Y+4, r19	; 0x04
    122e:	2b 83       	std	Y+3, r18	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	c9 f0       	breq	.+50     	; 0x126c <DIO_vSetGroupDir+0xca>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	2c f4       	brge	.+10     	; 0x124e <DIO_vSetGroupDir+0xac>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 f0       	breq	.+24     	; 0x1264 <DIO_vSetGroupDir+0xc2>
    124c:	1a c0       	rjmp	.+52     	; 0x1282 <DIO_vSetGroupDir+0xe0>
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	71 f0       	breq	.+28     	; 0x1274 <DIO_vSetGroupDir+0xd2>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	69 f0       	breq	.+26     	; 0x127c <DIO_vSetGroupDir+0xda>
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    1264:	ea e3       	ldi	r30, 0x3A	; 58
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	10 82       	st	Z, r1
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	10 82       	st	Z, r1
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 82       	st	Z, r1
		}
	}
}
    1282:	26 96       	adiw	r28, 0x06	; 6
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_vSetGroupValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_vSetGroupValue+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	d1 f0       	breq	.+52     	; 0x12ec <DIO_vSetGroupValue+0x58>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_vSetGroupValue+0x38>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <DIO_vSetGroupValue+0x4e>
    12ca:	1e c0       	rjmp	.+60     	; 0x1308 <DIO_vSetGroupValue+0x74>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <DIO_vSetGroupValue+0x62>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <DIO_vSetGroupValue+0x6c>
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <DIO_vSetGroupValue+0x74>
	{
	case PORTA: PORTA_REG = Copy_u8PortValue; break;
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <DIO_vSetGroupValue+0x74>
	case PORTB: PORTB_REG = Copy_u8PortValue; break;
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <DIO_vSetGroupValue+0x74>
	case PORTC: PORTC_REG = Copy_u8PortValue; break;
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <DIO_vSetGroupValue+0x74>
	case PORTD: PORTD_REG = Copy_u8PortValue; break;
    1300:	e2 e3       	ldi	r30, 0x32	; 50
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
	}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_u8ReadGroupValue+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_u8ReadGroupValue+0x8>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    1324:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	d1 f0       	breq	.+52     	; 0x136e <DIO_u8ReadGroupValue+0x58>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <DIO_u8ReadGroupValue+0x38>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f0       	breq	.+24     	; 0x1364 <DIO_u8ReadGroupValue+0x4e>
    134c:	1e c0       	rjmp	.+60     	; 0x138a <DIO_u8ReadGroupValue+0x74>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <DIO_u8ReadGroupValue+0x62>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	81 f0       	breq	.+32     	; 0x1382 <DIO_u8ReadGroupValue+0x6c>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    1364:	e9 e3       	ldi	r30, 0x39	; 57
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	0e c0       	rjmp	.+28     	; 0x138a <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    136e:	e6 e3       	ldi	r30, 0x36	; 54
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	09 c0       	rjmp	.+18     	; 0x138a <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    1378:	e3 e3       	ldi	r30, 0x33	; 51
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	04 c0       	rjmp	.+8      	; 0x138a <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    1382:	e0 e3       	ldi	r30, 0x30	; 48
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_vSet4LSBDir+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_vSet4LSBDir+0x8>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <DIO_vSet4LSBDir+0xa>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <DIO_vSet4LSBDir+0x1a>
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3e 83       	std	Y+6, r19	; 0x06
    13bc:	2d 83       	std	Y+5, r18	; 0x05
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	e9 f0       	breq	.+58     	; 0x1402 <DIO_vSet4LSBDir+0x68>
    13c8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ca:	3e 81       	ldd	r19, Y+6	; 0x06
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <DIO_vSet4LSBDir+0x42>
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <DIO_vSet4LSBDir+0x58>
    13da:	6d c0       	rjmp	.+218    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
    13dc:	2d 81       	ldd	r18, Y+5	; 0x05
    13de:	3e 81       	ldd	r19, Y+6	; 0x06
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	b1 f0       	breq	.+44     	; 0x1412 <DIO_vSet4LSBDir+0x78>
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	c9 f0       	breq	.+50     	; 0x1422 <DIO_vSet4LSBDir+0x88>
    13f0:	62 c0       	rjmp	.+196    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    13f2:	aa e3       	ldi	r26, 0x3A	; 58
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 60       	ori	r24, 0x0F	; 15
    13fe:	8c 93       	st	X, r24
    1400:	5a c0       	rjmp	.+180    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    1402:	a7 e3       	ldi	r26, 0x37	; 55
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e3       	ldi	r30, 0x37	; 55
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 60       	ori	r24, 0x0F	; 15
    140e:	8c 93       	st	X, r24
    1410:	52 c0       	rjmp	.+164    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    1412:	a4 e3       	ldi	r26, 0x34	; 52
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 60       	ori	r24, 0x0F	; 15
    141e:	8c 93       	st	X, r24
    1420:	4a c0       	rjmp	.+148    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    1422:	a1 e3       	ldi	r26, 0x31	; 49
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8f 60       	ori	r24, 0x0F	; 15
    142e:	8c 93       	st	X, r24
    1430:	42 c0       	rjmp	.+132    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	88 23       	and	r24, r24
    1436:	09 f0       	breq	.+2      	; 0x143a <DIO_vSet4LSBDir+0xa0>
    1438:	3e c0       	rjmp	.+124    	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	e9 f0       	breq	.+58     	; 0x1488 <DIO_vSet4LSBDir+0xee>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <DIO_vSet4LSBDir+0xc8>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <DIO_vSet4LSBDir+0xde>
    1460:	2a c0       	rjmp	.+84     	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	b1 f0       	breq	.+44     	; 0x1498 <DIO_vSet4LSBDir+0xfe>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	c9 f0       	breq	.+50     	; 0x14a8 <DIO_vSet4LSBDir+0x10e>
    1476:	1f c0       	rjmp	.+62     	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    1478:	aa e3       	ldi	r26, 0x3A	; 58
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ea e3       	ldi	r30, 0x3A	; 58
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 7f       	andi	r24, 0xF0	; 240
    1484:	8c 93       	st	X, r24
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    1488:	a7 e3       	ldi	r26, 0x37	; 55
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e7 e3       	ldi	r30, 0x37	; 55
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 7f       	andi	r24, 0xF0	; 240
    1494:	8c 93       	st	X, r24
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    1498:	a4 e3       	ldi	r26, 0x34	; 52
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 7f       	andi	r24, 0xF0	; 240
    14a4:	8c 93       	st	X, r24
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    14a8:	a1 e3       	ldi	r26, 0x31	; 49
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e1 e3       	ldi	r30, 0x31	; 49
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 7f       	andi	r24, 0xF0	; 240
    14b4:	8c 93       	st	X, r24
		}
	}
}
    14b6:	26 96       	adiw	r28, 0x06	; 6
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_vSet4MSBDir+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_vSet4MSBDir+0x8>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_vSet4MSBDir+0xa>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <DIO_vSet4MSBDir+0x1a>
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3e 83       	std	Y+6, r19	; 0x06
    14ea:	2d 83       	std	Y+5, r18	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	e9 f0       	breq	.+58     	; 0x1530 <DIO_vSet4MSBDir+0x68>
    14f6:	2d 81       	ldd	r18, Y+5	; 0x05
    14f8:	3e 81       	ldd	r19, Y+6	; 0x06
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <DIO_vSet4MSBDir+0x42>
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <DIO_vSet4MSBDir+0x58>
    1508:	6d c0       	rjmp	.+218    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	b1 f0       	breq	.+44     	; 0x1540 <DIO_vSet4MSBDir+0x78>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	c9 f0       	breq	.+50     	; 0x1550 <DIO_vSet4MSBDir+0x88>
    151e:	62 c0       	rjmp	.+196    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    1520:	aa e3       	ldi	r26, 0x3A	; 58
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 6f       	ori	r24, 0xF0	; 240
    152c:	8c 93       	st	X, r24
    152e:	5a c0       	rjmp	.+180    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    1530:	a7 e3       	ldi	r26, 0x37	; 55
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 6f       	ori	r24, 0xF0	; 240
    153c:	8c 93       	st	X, r24
    153e:	52 c0       	rjmp	.+164    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    1540:	a4 e3       	ldi	r26, 0x34	; 52
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e4 e3       	ldi	r30, 0x34	; 52
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 6f       	ori	r24, 0xF0	; 240
    154c:	8c 93       	st	X, r24
    154e:	4a c0       	rjmp	.+148    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    1550:	a1 e3       	ldi	r26, 0x31	; 49
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 6f       	ori	r24, 0xF0	; 240
    155c:	8c 93       	st	X, r24
    155e:	42 c0       	rjmp	.+132    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	88 23       	and	r24, r24
    1564:	09 f0       	breq	.+2      	; 0x1568 <DIO_vSet4MSBDir+0xa0>
    1566:	3e c0       	rjmp	.+124    	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3c 83       	std	Y+4, r19	; 0x04
    1570:	2b 83       	std	Y+3, r18	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	e9 f0       	breq	.+58     	; 0x15b6 <DIO_vSet4MSBDir+0xee>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <DIO_vSet4MSBDir+0xc8>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <DIO_vSet4MSBDir+0xde>
    158e:	2a c0       	rjmp	.+84     	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	b1 f0       	breq	.+44     	; 0x15c6 <DIO_vSet4MSBDir+0xfe>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	c9 f0       	breq	.+50     	; 0x15d6 <DIO_vSet4MSBDir+0x10e>
    15a4:	1f c0       	rjmp	.+62     	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    15a6:	aa e3       	ldi	r26, 0x3A	; 58
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8f 70       	andi	r24, 0x0F	; 15
    15b2:	8c 93       	st	X, r24
    15b4:	17 c0       	rjmp	.+46     	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    15b6:	a7 e3       	ldi	r26, 0x37	; 55
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e7 e3       	ldi	r30, 0x37	; 55
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 70       	andi	r24, 0x0F	; 15
    15c2:	8c 93       	st	X, r24
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    15c6:	a4 e3       	ldi	r26, 0x34	; 52
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e4 e3       	ldi	r30, 0x34	; 52
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 70       	andi	r24, 0x0F	; 15
    15d2:	8c 93       	st	X, r24
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    15d6:	a1 e3       	ldi	r26, 0x31	; 49
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e1 e3       	ldi	r30, 0x31	; 49
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 70       	andi	r24, 0x0F	; 15
    15e2:	8c 93       	st	X, r24
		}
	}
}
    15e4:	26 96       	adiw	r28, 0x06	; 6
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <DIO_vSet4LSBValue+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <DIO_vSet4LSBValue+0x8>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <DIO_vSet4LSBValue+0xa>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	09 f0       	breq	.+2      	; 0x1610 <DIO_vSet4LSBValue+0x1a>
    160e:	3f c0       	rjmp	.+126    	; 0x168e <DIO_vSet4LSBValue+0x98>
	{
		switch(Copy_u8PortName)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3e 83       	std	Y+6, r19	; 0x06
    1618:	2d 83       	std	Y+5, r18	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	e9 f0       	breq	.+58     	; 0x165e <DIO_vSet4LSBValue+0x68>
    1624:	2d 81       	ldd	r18, Y+5	; 0x05
    1626:	3e 81       	ldd	r19, Y+6	; 0x06
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	2c f4       	brge	.+10     	; 0x1638 <DIO_vSet4LSBValue+0x42>
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	61 f0       	breq	.+24     	; 0x164e <DIO_vSet4LSBValue+0x58>
    1636:	6d c0       	rjmp	.+218    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
    1638:	2d 81       	ldd	r18, Y+5	; 0x05
    163a:	3e 81       	ldd	r19, Y+6	; 0x06
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	b1 f0       	breq	.+44     	; 0x166e <DIO_vSet4LSBValue+0x78>
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	c9 f0       	breq	.+50     	; 0x167e <DIO_vSet4LSBValue+0x88>
    164c:	62 c0       	rjmp	.+196    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0x0F; break;
    164e:	ab e3       	ldi	r26, 0x3B	; 59
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e3       	ldi	r30, 0x3B	; 59
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8f 60       	ori	r24, 0x0F	; 15
    165a:	8c 93       	st	X, r24
    165c:	5a c0       	rjmp	.+180    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG |= 0x0F; break;
    165e:	a8 e3       	ldi	r26, 0x38	; 56
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e8 e3       	ldi	r30, 0x38	; 56
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 60       	ori	r24, 0x0F	; 15
    166a:	8c 93       	st	X, r24
    166c:	52 c0       	rjmp	.+164    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG |= 0x0F; break;
    166e:	a5 e3       	ldi	r26, 0x35	; 53
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e3       	ldi	r30, 0x35	; 53
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 60       	ori	r24, 0x0F	; 15
    167a:	8c 93       	st	X, r24
    167c:	4a c0       	rjmp	.+148    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG |= 0x0F; break;
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 60       	ori	r24, 0x0F	; 15
    168a:	8c 93       	st	X, r24
    168c:	42 c0       	rjmp	.+132    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 23       	and	r24, r24
    1692:	09 f0       	breq	.+2      	; 0x1696 <DIO_vSet4LSBValue+0xa0>
    1694:	3e c0       	rjmp	.+124    	; 0x1712 <DIO_vSet4LSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3c 83       	std	Y+4, r19	; 0x04
    169e:	2b 83       	std	Y+3, r18	; 0x03
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	e9 f0       	breq	.+58     	; 0x16e4 <DIO_vSet4LSBValue+0xee>
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <DIO_vSet4LSBValue+0xc8>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <DIO_vSet4LSBValue+0xde>
    16bc:	2a c0       	rjmp	.+84     	; 0x1712 <DIO_vSet4LSBValue+0x11c>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	b1 f0       	breq	.+44     	; 0x16f4 <DIO_vSet4LSBValue+0xfe>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	c9 f0       	breq	.+50     	; 0x1704 <DIO_vSet4LSBValue+0x10e>
    16d2:	1f c0       	rjmp	.+62     	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0xF0; break;
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 7f       	andi	r24, 0xF0	; 240
    16e0:	8c 93       	st	X, r24
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG &= 0xF0; break;
    16e4:	a8 e3       	ldi	r26, 0x38	; 56
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 7f       	andi	r24, 0xF0	; 240
    16f0:	8c 93       	st	X, r24
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG &= 0xF0; break;
    16f4:	a5 e3       	ldi	r26, 0x35	; 53
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	8c 93       	st	X, r24
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG &= 0xF0; break;
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 7f       	andi	r24, 0xF0	; 240
    1710:	8c 93       	st	X, r24
		}
	}
}
    1712:	26 96       	adiw	r28, 0x06	; 6
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <DIO_vSet4MSBValue+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <DIO_vSet4MSBValue+0x8>
    172c:	00 d0       	rcall	.+0      	; 0x172e <DIO_vSet4MSBValue+0xa>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	09 f0       	breq	.+2      	; 0x173e <DIO_vSet4MSBValue+0x1a>
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <DIO_vSet4MSBValue+0x98>
	{
		switch(Copy_u8PortName)
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3e 83       	std	Y+6, r19	; 0x06
    1746:	2d 83       	std	Y+5, r18	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	e9 f0       	breq	.+58     	; 0x178c <DIO_vSet4MSBValue+0x68>
    1752:	2d 81       	ldd	r18, Y+5	; 0x05
    1754:	3e 81       	ldd	r19, Y+6	; 0x06
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <DIO_vSet4MSBValue+0x42>
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	61 f0       	breq	.+24     	; 0x177c <DIO_vSet4MSBValue+0x58>
    1764:	6d c0       	rjmp	.+218    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	b1 f0       	breq	.+44     	; 0x179c <DIO_vSet4MSBValue+0x78>
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	91 05       	cpc	r25, r1
    1778:	c9 f0       	breq	.+50     	; 0x17ac <DIO_vSet4MSBValue+0x88>
    177a:	62 c0       	rjmp	.+196    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0xF0; break;
    177c:	ab e3       	ldi	r26, 0x3B	; 59
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 6f       	ori	r24, 0xF0	; 240
    1788:	8c 93       	st	X, r24
    178a:	5a c0       	rjmp	.+180    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG |= 0xF0; break;
    178c:	a8 e3       	ldi	r26, 0x38	; 56
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 6f       	ori	r24, 0xF0	; 240
    1798:	8c 93       	st	X, r24
    179a:	52 c0       	rjmp	.+164    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG |= 0xF0; break;
    179c:	a5 e3       	ldi	r26, 0x35	; 53
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e3       	ldi	r30, 0x35	; 53
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 6f       	ori	r24, 0xF0	; 240
    17a8:	8c 93       	st	X, r24
    17aa:	4a c0       	rjmp	.+148    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG |= 0xF0; break;
    17ac:	a2 e3       	ldi	r26, 0x32	; 50
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 6f       	ori	r24, 0xF0	; 240
    17b8:	8c 93       	st	X, r24
    17ba:	42 c0       	rjmp	.+132    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	88 23       	and	r24, r24
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <DIO_vSet4MSBValue+0xa0>
    17c2:	3e c0       	rjmp	.+124    	; 0x1840 <DIO_vSet4MSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3c 83       	std	Y+4, r19	; 0x04
    17cc:	2b 83       	std	Y+3, r18	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	e9 f0       	breq	.+58     	; 0x1812 <DIO_vSet4MSBValue+0xee>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <DIO_vSet4MSBValue+0xc8>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	61 f0       	breq	.+24     	; 0x1802 <DIO_vSet4MSBValue+0xde>
    17ea:	2a c0       	rjmp	.+84     	; 0x1840 <DIO_vSet4MSBValue+0x11c>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	b1 f0       	breq	.+44     	; 0x1822 <DIO_vSet4MSBValue+0xfe>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	c9 f0       	breq	.+50     	; 0x1832 <DIO_vSet4MSBValue+0x10e>
    1800:	1f c0       	rjmp	.+62     	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0x0F; break;
    1802:	ab e3       	ldi	r26, 0x3B	; 59
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e3       	ldi	r30, 0x3B	; 59
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8f 70       	andi	r24, 0x0F	; 15
    180e:	8c 93       	st	X, r24
    1810:	17 c0       	rjmp	.+46     	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG &= 0x0F; break;
    1812:	a8 e3       	ldi	r26, 0x38	; 56
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e8 e3       	ldi	r30, 0x38	; 56
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 70       	andi	r24, 0x0F	; 15
    181e:	8c 93       	st	X, r24
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG &= 0x0F; break;
    1822:	a5 e3       	ldi	r26, 0x35	; 53
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e3       	ldi	r30, 0x35	; 53
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 70       	andi	r24, 0x0F	; 15
    182e:	8c 93       	st	X, r24
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG &= 0x0F; break;
    1832:	a2 e3       	ldi	r26, 0x32	; 50
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e2 e3       	ldi	r30, 0x32	; 50
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	8c 93       	st	X, r24
		}
	}
}
    1840:	26 96       	adiw	r28, 0x06	; 6
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_vInit>:
#include "LCD_interface.h"
#define F_CPU 8000000UL //CPU Frequency is 8MHZ
#include <util/delay.h>

//Function to initialize LCD
void LCD_vInit(void){
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	c6 54       	subi	r28, 0x46	; 70
    1860:	d0 40       	sbci	r29, 0x00	; 0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetGroupDir(LCD_DATA_PORT, OUTPUT);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_vSetGroupDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RS_PIN, OUTPUT);
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RW_PIN, OUTPUT);
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, EN_PIN, OUTPUT);
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
    1892:	fe 01       	movw	r30, r28
    1894:	ed 5b       	subi	r30, 0xBD	; 189
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e2       	ldi	r26, 0x20	; 32
    189e:	b1 e4       	ldi	r27, 0x41	; 65
    18a0:	80 83       	st	Z, r24
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	a2 83       	std	Z+2, r26	; 0x02
    18a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	8e 01       	movw	r16, r28
    18aa:	01 5c       	subi	r16, 0xC1	; 193
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	ed 5b       	subi	r30, 0xBD	; 189
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a ef       	ldi	r20, 0xFA	; 250
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	f8 01       	movw	r30, r16
    18ce:	80 83       	st	Z, r24
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	a2 83       	std	Z+2, r26	; 0x02
    18d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d6:	fe 01       	movw	r30, r28
    18d8:	ff 96       	adiw	r30, 0x3f	; 63
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ee:	88 23       	and	r24, r24
    18f0:	2c f4       	brge	.+10     	; 0x18fc <LCD_vInit+0xaa>
		__ticks = 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9e af       	std	Y+62, r25	; 0x3e
    18f8:	8d af       	std	Y+61, r24	; 0x3d
    18fa:	46 c0       	rjmp	.+140    	; 0x1988 <LCD_vInit+0x136>
	else if (__tmp > 65535)
    18fc:	fe 01       	movw	r30, r28
    18fe:	ff 96       	adiw	r30, 0x3f	; 63
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	64 f5       	brge	.+88     	; 0x1970 <LCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	fe 01       	movw	r30, r28
    191a:	ed 5b       	subi	r30, 0xBD	; 189
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9e af       	std	Y+62, r25	; 0x3e
    1944:	8d af       	std	Y+61, r24	; 0x3d
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <LCD_vInit+0x114>
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c af       	std	Y+60, r25	; 0x3c
    194e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1950:	8b ad       	ldd	r24, Y+59	; 0x3b
    1952:	9c ad       	ldd	r25, Y+60	; 0x3c
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_vInit+0x102>
    1958:	9c af       	std	Y+60, r25	; 0x3c
    195a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8d ad       	ldd	r24, Y+61	; 0x3d
    195e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9e af       	std	Y+62, r25	; 0x3e
    1964:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8d ad       	ldd	r24, Y+61	; 0x3d
    1968:	9e ad       	ldd	r25, Y+62	; 0x3e
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <LCD_vInit+0xf6>
    196e:	16 c0       	rjmp	.+44     	; 0x199c <LCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	fe 01       	movw	r30, r28
    1972:	ff 96       	adiw	r30, 0x3f	; 63
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e af       	std	Y+62, r25	; 0x3e
    1986:	8d af       	std	Y+61, r24	; 0x3d
    1988:	8d ad       	ldd	r24, Y+61	; 0x3d
    198a:	9e ad       	ldd	r25, Y+62	; 0x3e
    198c:	9a af       	std	Y+58, r25	; 0x3a
    198e:	89 af       	std	Y+57, r24	; 0x39
    1990:	89 ad       	ldd	r24, Y+57	; 0x39
    1992:	9a ad       	ldd	r25, Y+58	; 0x3a
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_vInit+0x142>
    1998:	9a af       	std	Y+58, r25	; 0x3a
    199a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSendCmd(TWO_LINE_EIGHT_BITS_BIG_FONT);
    199c:	8c e3       	ldi	r24, 0x3C	; 60
    199e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e2       	ldi	r26, 0x20	; 32
    19a8:	b1 e4       	ldi	r27, 0x41	; 65
    19aa:	8d ab       	std	Y+53, r24	; 0x35
    19ac:	9e ab       	std	Y+54, r25	; 0x36
    19ae:	af ab       	std	Y+55, r26	; 0x37
    19b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6d a9       	ldd	r22, Y+53	; 0x35
    19b4:	7e a9       	ldd	r23, Y+54	; 0x36
    19b6:	8f a9       	ldd	r24, Y+55	; 0x37
    19b8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	89 ab       	std	Y+49, r24	; 0x31
    19cc:	9a ab       	std	Y+50, r25	; 0x32
    19ce:	ab ab       	std	Y+51, r26	; 0x33
    19d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19d2:	69 a9       	ldd	r22, Y+49	; 0x31
    19d4:	7a a9       	ldd	r23, Y+50	; 0x32
    19d6:	8b a9       	ldd	r24, Y+51	; 0x33
    19d8:	9c a9       	ldd	r25, Y+52	; 0x34
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_vInit+0x1a2>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	98 ab       	std	Y+48, r25	; 0x30
    19f0:	8f a7       	std	Y+47, r24	; 0x2f
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_vInit+0x220>
	else if (__tmp > 65535)
    19f4:	69 a9       	ldd	r22, Y+49	; 0x31
    19f6:	7a a9       	ldd	r23, Y+50	; 0x32
    19f8:	8b a9       	ldd	r24, Y+51	; 0x33
    19fa:	9c a9       	ldd	r25, Y+52	; 0x34
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a10:	8f a9       	ldd	r24, Y+55	; 0x37
    1a12:	98 ad       	ldd	r25, Y+56	; 0x38
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_vInit+0x202>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e a7       	std	Y+46, r25	; 0x2e
    1a3c:	8d a7       	std	Y+45, r24	; 0x2d
    1a3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_vInit+0x1f0>
    1a46:	9e a7       	std	Y+46, r25	; 0x2e
    1a48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	98 ab       	std	Y+48, r25	; 0x30
    1a52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a56:	98 a9       	ldd	r25, Y+48	; 0x30
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_vInit+0x1e4>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
    1a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a74:	98 a9       	ldd	r25, Y+48	; 0x30
    1a76:	9c a7       	std	Y+44, r25	; 0x2c
    1a78:	8b a7       	std	Y+43, r24	; 0x2b
    1a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_vInit+0x22c>
    1a82:	9c a7       	std	Y+44, r25	; 0x2c
    1a84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vSendCmd(CURSOR_ON);
    1a86:	8f e0       	ldi	r24, 0x0F	; 15
    1a88:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e2       	ldi	r26, 0x20	; 32
    1a92:	b1 e4       	ldi	r27, 0x41	; 65
    1a94:	8f a3       	std	Y+39, r24	; 0x27
    1a96:	98 a7       	std	Y+40, r25	; 0x28
    1a98:	a9 a7       	std	Y+41, r26	; 0x29
    1a9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a ef       	ldi	r20, 0xFA	; 250
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8b a3       	std	Y+35, r24	; 0x23
    1ab6:	9c a3       	std	Y+36, r25	; 0x24
    1ab8:	ad a3       	std	Y+37, r26	; 0x25
    1aba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1abc:	6b a1       	ldd	r22, Y+35	; 0x23
    1abe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <LCD_vInit+0x28c>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9a a3       	std	Y+34, r25	; 0x22
    1ada:	89 a3       	std	Y+33, r24	; 0x21
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <LCD_vInit+0x30a>
	else if (__tmp > 65535)
    1ade:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <LCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6f a1       	ldd	r22, Y+39	; 0x27
    1af8:	78 a5       	ldd	r23, Y+40	; 0x28
    1afa:	89 a5       	ldd	r24, Y+41	; 0x29
    1afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <LCD_vInit+0x2ec>
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	98 a3       	std	Y+32, r25	; 0x20
    1b26:	8f 8f       	std	Y+31, r24	; 0x1f
    1b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_vInit+0x2da>
    1b30:	98 a3       	std	Y+32, r25	; 0x20
    1b32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	89 a1       	ldd	r24, Y+33	; 0x21
    1b36:	9a a1       	ldd	r25, Y+34	; 0x22
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	9a a1       	ldd	r25, Y+34	; 0x22
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <LCD_vInit+0x2ce>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <LCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9a a3       	std	Y+34, r25	; 0x22
    1b5a:	89 a3       	std	Y+33, r24	; 0x21
    1b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b60:	9e 8f       	std	Y+30, r25	; 0x1e
    1b62:	8d 8f       	std	Y+29, r24	; 0x1d
    1b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_vInit+0x316>
    1b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vSendCmd(CLEAR_COMMAND);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e2       	ldi	r26, 0x20	; 32
    1b7c:	b1 e4       	ldi	r27, 0x41	; 65
    1b7e:	89 8f       	std	Y+25, r24	; 0x19
    1b80:	9a 8f       	std	Y+26, r25	; 0x1a
    1b82:	ab 8f       	std	Y+27, r26	; 0x1b
    1b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	69 8d       	ldd	r22, Y+25	; 0x19
    1b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ba0:	9e 8b       	std	Y+22, r25	; 0x16
    1ba2:	af 8b       	std	Y+23, r26	; 0x17
    1ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_vInit+0x376>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_vInit+0x3f4>
	else if (__tmp > 65535)
    1bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bca:	7e 89       	ldd	r23, Y+22	; 0x16
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_vInit+0x3d6>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
    1c12:	89 89       	ldd	r24, Y+17	; 0x11
    1c14:	9a 89       	ldd	r25, Y+18	; 0x12
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_vInit+0x3c4>
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_vInit+0x3b8>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	98 89       	ldd	r25, Y+16	; 0x10
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_vInit+0x400>
    1c56:	98 8b       	std	Y+16, r25	; 0x10
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSendCmd(START_FROM_LEFT_NO_SHIFT);
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e2       	ldi	r26, 0x20	; 32
    1c66:	b1 e4       	ldi	r27, 0x41	; 65
    1c68:	8b 87       	std	Y+11, r24	; 0x0b
    1c6a:	9c 87       	std	Y+12, r25	; 0x0c
    1c6c:	ad 87       	std	Y+13, r26	; 0x0d
    1c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8f 83       	std	Y+7, r24	; 0x07
    1c8a:	98 87       	std	Y+8, r25	; 0x08
    1c8c:	a9 87       	std	Y+9, r26	; 0x09
    1c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <LCD_vInit+0x460>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	3f c0       	rjmp	.+126    	; 0x1d30 <LCD_vInit+0x4de>
	else if (__tmp > 65535)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	57 e4       	ldi	r21, 0x47	; 71
    1cc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	4c f5       	brge	.+82     	; 0x1d1c <LCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <LCD_vInit+0x4c0>
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_vInit+0x4ae>
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	69 f7       	brne	.-38     	; 0x1cf4 <LCD_vInit+0x4a2>
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <LCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_vInit+0x4ea>
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d44:	ca 5b       	subi	r28, 0xBA	; 186
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	08 95       	ret

00001d5c <LCD_vSendCmd>:

//Function to send a command to the LCD
void LCD_vSendCmd(u8 Copy_u8Command){
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	e9 97       	sbiw	r28, 0x39	; 57
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, LOW);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e2       	ldi	r26, 0x20	; 32
    1d8c:	b1 e4       	ldi	r27, 0x41	; 65
    1d8e:	8d ab       	std	Y+53, r24	; 0x35
    1d90:	9e ab       	std	Y+54, r25	; 0x36
    1d92:	af ab       	std	Y+55, r26	; 0x37
    1d94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6d a9       	ldd	r22, Y+53	; 0x35
    1d98:	7e a9       	ldd	r23, Y+54	; 0x36
    1d9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a ef       	ldi	r20, 0xFA	; 250
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	89 ab       	std	Y+49, r24	; 0x31
    1db0:	9a ab       	std	Y+50, r25	; 0x32
    1db2:	ab ab       	std	Y+51, r26	; 0x33
    1db4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1db6:	69 a9       	ldd	r22, Y+49	; 0x31
    1db8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dba:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <LCD_vSendCmd+0x7c>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	98 ab       	std	Y+48, r25	; 0x30
    1dd4:	8f a7       	std	Y+47, r24	; 0x2f
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <LCD_vSendCmd+0xfa>
	else if (__tmp > 65535)
    1dd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dda:	7a a9       	ldd	r23, Y+50	; 0x32
    1ddc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dde:	9c a9       	ldd	r25, Y+52	; 0x34
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <LCD_vSendCmd+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6d a9       	ldd	r22, Y+53	; 0x35
    1df2:	7e a9       	ldd	r23, Y+54	; 0x36
    1df4:	8f a9       	ldd	r24, Y+55	; 0x37
    1df6:	98 ad       	ldd	r25, Y+56	; 0x38
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	98 ab       	std	Y+48, r25	; 0x30
    1e16:	8f a7       	std	Y+47, r24	; 0x2f
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_vSendCmd+0xdc>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
    1e22:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e24:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_vSendCmd+0xca>
    1e2a:	9e a7       	std	Y+46, r25	; 0x2e
    1e2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e30:	98 a9       	ldd	r25, Y+48	; 0x30
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	98 ab       	std	Y+48, r25	; 0x30
    1e36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_vSendCmd+0xbe>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <LCD_vSendCmd+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	69 a9       	ldd	r22, Y+49	; 0x31
    1e44:	7a a9       	ldd	r23, Y+50	; 0x32
    1e46:	8b a9       	ldd	r24, Y+51	; 0x33
    1e48:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	98 ab       	std	Y+48, r25	; 0x30
    1e54:	8f a7       	std	Y+47, r24	; 0x2f
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
    1e5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_vSendCmd+0x106>
    1e66:	9c a7       	std	Y+44, r25	; 0x2c
    1e68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e2       	ldi	r26, 0x20	; 32
    1e7a:	b1 e4       	ldi	r27, 0x41	; 65
    1e7c:	8f a3       	std	Y+39, r24	; 0x27
    1e7e:	98 a7       	std	Y+40, r25	; 0x28
    1e80:	a9 a7       	std	Y+41, r26	; 0x29
    1e82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	6f a1       	ldd	r22, Y+39	; 0x27
    1e86:	78 a5       	ldd	r23, Y+40	; 0x28
    1e88:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a ef       	ldi	r20, 0xFA	; 250
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8b a3       	std	Y+35, r24	; 0x23
    1e9e:	9c a3       	std	Y+36, r25	; 0x24
    1ea0:	ad a3       	std	Y+37, r26	; 0x25
    1ea2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_vSendCmd+0x16a>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9a a3       	std	Y+34, r25	; 0x22
    1ec2:	89 a3       	std	Y+33, r24	; 0x21
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_vSendCmd+0x1e8>
	else if (__tmp > 65535)
    1ec6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ecc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_vSendCmd+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	6f a1       	ldd	r22, Y+39	; 0x27
    1ee0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ee2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ee4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_vSendCmd+0x1ca>
    1f08:	88 ec       	ldi	r24, 0xC8	; 200
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f12:	98 a1       	ldd	r25, Y+32	; 0x20
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_vSendCmd+0x1b8>
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_vSendCmd+0x1ac>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_vSendCmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6b a1       	ldd	r22, Y+35	; 0x23
    1f32:	7c a1       	ldd	r23, Y+36	; 0x24
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	9e a1       	ldd	r25, Y+38	; 0x26
    1f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9a a3       	std	Y+34, r25	; 0x22
    1f42:	89 a3       	std	Y+33, r24	; 0x21
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_vSendCmd+0x1f4>
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Command);
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	69 ad       	ldd	r22, Y+57	; 0x39
    1f5c:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_vSetGroupValue>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e2       	ldi	r26, 0x20	; 32
    1f66:	b1 e4       	ldi	r27, 0x41	; 65
    1f68:	89 8f       	std	Y+25, r24	; 0x19
    1f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	69 8d       	ldd	r22, Y+25	; 0x19
    1f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8d 8b       	std	Y+21, r24	; 0x15
    1f8a:	9e 8b       	std	Y+22, r25	; 0x16
    1f8c:	af 8b       	std	Y+23, r26	; 0x17
    1f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_vSendCmd+0x256>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_vSendCmd+0x2d4>
	else if (__tmp > 65535)
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_vSendCmd+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_vSendCmd+0x2b6>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
    1ffc:	89 89       	ldd	r24, Y+17	; 0x11
    1ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_vSendCmd+0x2a4>
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_vSendCmd+0x298>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_vSendCmd+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	98 8b       	std	Y+16, r25	; 0x10
    2036:	8f 87       	std	Y+15, r24	; 0x0f
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
    203a:	98 89       	ldd	r25, Y+16	; 0x10
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_vSendCmd+0x2e0>
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
	//PORTD_REG = Copy_u8Command;
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e2       	ldi	r26, 0x20	; 32
    2054:	b1 e4       	ldi	r27, 0x41	; 65
    2056:	8b 87       	std	Y+11, r24	; 0x0b
    2058:	9c 87       	std	Y+12, r25	; 0x0c
    205a:	ad 87       	std	Y+13, r26	; 0x0d
    205c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2060:	7c 85       	ldd	r23, Y+12	; 0x0c
    2062:	8d 85       	ldd	r24, Y+13	; 0x0d
    2064:	9e 85       	ldd	r25, Y+14	; 0x0e
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8f 83       	std	Y+7, r24	; 0x07
    2078:	98 87       	std	Y+8, r25	; 0x08
    207a:	a9 87       	std	Y+9, r26	; 0x09
    207c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_vSendCmd+0x344>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_vSendCmd+0x3c2>
	else if (__tmp > 65535)
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_vSendCmd+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    20bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20be:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_vSendCmd+0x3a4>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_vSendCmd+0x392>
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_vSendCmd+0x386>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_vSendCmd+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_vSendCmd+0x3ce>
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2132:	e9 96       	adiw	r28, 0x39	; 57
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <LCD_vDisplayChar>:

//Function to display a character on the LCD
void LCD_vDisplayChar(u8 Copy_u8Character){
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	e9 97       	sbiw	r28, 0x39	; 57
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, HIGH);
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e2       	ldi	r26, 0x20	; 32
    2174:	b1 e4       	ldi	r27, 0x41	; 65
    2176:	8d ab       	std	Y+53, r24	; 0x35
    2178:	9e ab       	std	Y+54, r25	; 0x36
    217a:	af ab       	std	Y+55, r26	; 0x37
    217c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	6d a9       	ldd	r22, Y+53	; 0x35
    2180:	7e a9       	ldd	r23, Y+54	; 0x36
    2182:	8f a9       	ldd	r24, Y+55	; 0x37
    2184:	98 ad       	ldd	r25, Y+56	; 0x38
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a ef       	ldi	r20, 0xFA	; 250
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	89 ab       	std	Y+49, r24	; 0x31
    2198:	9a ab       	std	Y+50, r25	; 0x32
    219a:	ab ab       	std	Y+51, r26	; 0x33
    219c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_vDisplayChar+0x7c>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	98 ab       	std	Y+48, r25	; 0x30
    21bc:	8f a7       	std	Y+47, r24	; 0x2f
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_vDisplayChar+0xfa>
	else if (__tmp > 65535)
    21c0:	69 a9       	ldd	r22, Y+49	; 0x31
    21c2:	7a a9       	ldd	r23, Y+50	; 0x32
    21c4:	8b a9       	ldd	r24, Y+51	; 0x33
    21c6:	9c a9       	ldd	r25, Y+52	; 0x34
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_vDisplayChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	6d a9       	ldd	r22, Y+53	; 0x35
    21da:	7e a9       	ldd	r23, Y+54	; 0x36
    21dc:	8f a9       	ldd	r24, Y+55	; 0x37
    21de:	98 ad       	ldd	r25, Y+56	; 0x38
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	98 ab       	std	Y+48, r25	; 0x30
    21fe:	8f a7       	std	Y+47, r24	; 0x2f
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_vDisplayChar+0xdc>
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9e a7       	std	Y+46, r25	; 0x2e
    2208:	8d a7       	std	Y+45, r24	; 0x2d
    220a:	8d a5       	ldd	r24, Y+45	; 0x2d
    220c:	9e a5       	ldd	r25, Y+46	; 0x2e
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_vDisplayChar+0xca>
    2212:	9e a7       	std	Y+46, r25	; 0x2e
    2214:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8f a5       	ldd	r24, Y+47	; 0x2f
    2218:	98 a9       	ldd	r25, Y+48	; 0x30
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_vDisplayChar+0xbe>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <LCD_vDisplayChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	69 a9       	ldd	r22, Y+49	; 0x31
    222c:	7a a9       	ldd	r23, Y+50	; 0x32
    222e:	8b a9       	ldd	r24, Y+51	; 0x33
    2230:	9c a9       	ldd	r25, Y+52	; 0x34
    2232:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	98 ab       	std	Y+48, r25	; 0x30
    223c:	8f a7       	std	Y+47, r24	; 0x2f
    223e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2240:	98 a9       	ldd	r25, Y+48	; 0x30
    2242:	9c a7       	std	Y+44, r25	; 0x2c
    2244:	8b a7       	std	Y+43, r24	; 0x2b
    2246:	8b a5       	ldd	r24, Y+43	; 0x2b
    2248:	9c a5       	ldd	r25, Y+44	; 0x2c
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_vDisplayChar+0x106>
    224e:	9c a7       	std	Y+44, r25	; 0x2c
    2250:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e2       	ldi	r26, 0x20	; 32
    2262:	b1 e4       	ldi	r27, 0x41	; 65
    2264:	8f a3       	std	Y+39, r24	; 0x27
    2266:	98 a7       	std	Y+40, r25	; 0x28
    2268:	a9 a7       	std	Y+41, r26	; 0x29
    226a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6f a1       	ldd	r22, Y+39	; 0x27
    226e:	78 a5       	ldd	r23, Y+40	; 0x28
    2270:	89 a5       	ldd	r24, Y+41	; 0x29
    2272:	9a a5       	ldd	r25, Y+42	; 0x2a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8b a3       	std	Y+35, r24	; 0x23
    2286:	9c a3       	std	Y+36, r25	; 0x24
    2288:	ad a3       	std	Y+37, r26	; 0x25
    228a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_vDisplayChar+0x16a>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9a a3       	std	Y+34, r25	; 0x22
    22aa:	89 a3       	std	Y+33, r24	; 0x21
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_vDisplayChar+0x1e8>
	else if (__tmp > 65535)
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_vDisplayChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9a a3       	std	Y+34, r25	; 0x22
    22ec:	89 a3       	std	Y+33, r24	; 0x21
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_vDisplayChar+0x1ca>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	98 a3       	std	Y+32, r25	; 0x20
    22f6:	8f 8f       	std	Y+31, r24	; 0x1f
    22f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fa:	98 a1       	ldd	r25, Y+32	; 0x20
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_vDisplayChar+0x1b8>
    2300:	98 a3       	std	Y+32, r25	; 0x20
    2302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	9a a1       	ldd	r25, Y+34	; 0x22
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_vDisplayChar+0x1ac>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_vDisplayChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	9e 8f       	std	Y+30, r25	; 0x1e
    2332:	8d 8f       	std	Y+29, r24	; 0x1d
    2334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_vDisplayChar+0x1f4>
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Character);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	69 ad       	ldd	r22, Y+57	; 0x39
    2344:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_vSetGroupValue>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e2       	ldi	r26, 0x20	; 32
    234e:	b1 e4       	ldi	r27, 0x41	; 65
    2350:	89 8f       	std	Y+25, r24	; 0x19
    2352:	9a 8f       	std	Y+26, r25	; 0x1a
    2354:	ab 8f       	std	Y+27, r26	; 0x1b
    2356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	69 8d       	ldd	r22, Y+25	; 0x19
    235a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8d 8b       	std	Y+21, r24	; 0x15
    2372:	9e 8b       	std	Y+22, r25	; 0x16
    2374:	af 8b       	std	Y+23, r26	; 0x17
    2376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_vDisplayChar+0x256>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 8b       	std	Y+20, r25	; 0x14
    2396:	8b 8b       	std	Y+19, r24	; 0x13
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_vDisplayChar+0x2d4>
	else if (__tmp > 65535)
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_vDisplayChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	69 8d       	ldd	r22, Y+25	; 0x19
    23b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9c 8b       	std	Y+20, r25	; 0x14
    23d8:	8b 8b       	std	Y+19, r24	; 0x13
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_vDisplayChar+0x2b6>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9a 8b       	std	Y+18, r25	; 0x12
    23e2:	89 8b       	std	Y+17, r24	; 0x11
    23e4:	89 89       	ldd	r24, Y+17	; 0x11
    23e6:	9a 89       	ldd	r25, Y+18	; 0x12
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_vDisplayChar+0x2a4>
    23ec:	9a 8b       	std	Y+18, r25	; 0x12
    23ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	9c 89       	ldd	r25, Y+20	; 0x14
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8b 89       	ldd	r24, Y+19	; 0x13
    23fc:	9c 89       	ldd	r25, Y+20	; 0x14
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_vDisplayChar+0x298>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <LCD_vDisplayChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6d 89       	ldd	r22, Y+21	; 0x15
    2406:	7e 89       	ldd	r23, Y+22	; 0x16
    2408:	8f 89       	ldd	r24, Y+23	; 0x17
    240a:	98 8d       	ldd	r25, Y+24	; 0x18
    240c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9c 8b       	std	Y+20, r25	; 0x14
    2416:	8b 8b       	std	Y+19, r24	; 0x13
    2418:	8b 89       	ldd	r24, Y+19	; 0x13
    241a:	9c 89       	ldd	r25, Y+20	; 0x14
    241c:	98 8b       	std	Y+16, r25	; 0x10
    241e:	8f 87       	std	Y+15, r24	; 0x0f
    2420:	8f 85       	ldd	r24, Y+15	; 0x0f
    2422:	98 89       	ldd	r25, Y+16	; 0x10
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_vDisplayChar+0x2e0>
    2428:	98 8b       	std	Y+16, r25	; 0x10
    242a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e2       	ldi	r26, 0x20	; 32
    243c:	b1 e4       	ldi	r27, 0x41	; 65
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_vDisplayChar+0x344>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_vDisplayChar+0x3c2>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_vDisplayChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_vDisplayChar+0x3a4>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_vDisplayChar+0x392>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_vDisplayChar+0x386>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_vDisplayChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_vDisplayChar+0x3ce>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    251a:	e9 96       	adiw	r28, 0x39	; 57
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <LCD_vDisplayString>:

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <LCD_vDisplayString+0x6>
    2532:	00 d0       	rcall	.+0      	; 0x2534 <LCD_vDisplayString+0x8>
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;Copy_u8String[i]!='\0';i++)
    253c:	1a 82       	std	Y+2, r1	; 0x02
    253e:	19 82       	std	Y+1, r1	; 0x01
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <LCD_vDisplayString+0x34>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
    2542:	29 81       	ldd	r18, Y+1	; 0x01
    2544:	3a 81       	ldd	r19, Y+2	; 0x02
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	fc 01       	movw	r30, r24
    254c:	e2 0f       	add	r30, r18
    254e:	f3 1f       	adc	r31, r19
    2550:	80 81       	ld	r24, Z
    2552:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_vDisplayChar>
	_delay_ms(10);
}

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
	for(int i=0;Copy_u8String[i]!='\0';i++)
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	29 81       	ldd	r18, Y+1	; 0x01
    2562:	3a 81       	ldd	r19, Y+2	; 0x02
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	39 f7       	brne	.-50     	; 0x2542 <LCD_vDisplayString+0x16>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
	}
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <LCD_vDisplayNumber>:

//Function to display a number on the LCD
void LCD_vDisplayNumber(u16 Copy_u8Number){
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	2b 97       	sbiw	r28, 0x0b	; 11
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	9b 87       	std	Y+11, r25	; 0x0b
    2598:	8a 87       	std	Y+10, r24	; 0x0a
	if(Copy_u8Number == 0)
    259a:	8a 85       	ldd	r24, Y+10	; 0x0a
    259c:	9b 85       	ldd	r25, Y+11	; 0x0b
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	21 f4       	brne	.+8      	; 0x25aa <LCD_vDisplayNumber+0x28>
	{
		LCD_vDisplayChar('0');
    25a2:	80 e3       	ldi	r24, 0x30	; 48
    25a4:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_vDisplayChar>
    25a8:	40 c0       	rjmp	.+128    	; 0x262a <LCD_vDisplayNumber+0xa8>
	}
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
    25aa:	1b 82       	std	Y+3, r1	; 0x03
    25ac:	1f c0       	rjmp	.+62     	; 0x25ec <LCD_vDisplayNumber+0x6a>
		while(Copy_u8Number != 0)
		{
			Local_u8TempNumber = Copy_u8Number%10;
    25ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	b9 01       	movw	r22, r18
    25b8:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__udivmodhi4>
    25bc:	8c 83       	std	Y+4, r24	; 0x04
			Copy_u8Number /= 10;
    25be:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c2:	2a e0       	ldi	r18, 0x0A	; 10
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	b9 01       	movw	r22, r18
    25c8:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__udivmodhi4>
    25cc:	cb 01       	movw	r24, r22
    25ce:	9b 87       	std	Y+11, r25	; 0x0b
    25d0:	8a 87       	std	Y+10, r24	; 0x0a
			Array[j] = Local_u8TempNumber;
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	ce 01       	movw	r24, r28
    25da:	05 96       	adiw	r24, 0x05	; 5
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	8c 81       	ldd	r24, Y+4	; 0x04
    25e4:	80 83       	st	Z, r24
			j++;
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
		while(Copy_u8Number != 0)
    25ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	e9 f6       	brne	.-70     	; 0x25ae <LCD_vDisplayNumber+0x2c>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	10 c0       	rjmp	.+32     	; 0x2622 <LCD_vDisplayNumber+0xa0>
		{
			LCD_vDisplayChar(Array[i]+48);
    2602:	29 81       	ldd	r18, Y+1	; 0x01
    2604:	3a 81       	ldd	r19, Y+2	; 0x02
    2606:	ce 01       	movw	r24, r28
    2608:	05 96       	adiw	r24, 0x05	; 5
    260a:	fc 01       	movw	r30, r24
    260c:	e2 0f       	add	r30, r18
    260e:	f3 1f       	adc	r31, r19
    2610:	80 81       	ld	r24, Z
    2612:	80 5d       	subi	r24, 0xD0	; 208
    2614:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_vDisplayChar>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	99 23       	and	r25, r25
    2628:	64 f7       	brge	.-40     	; 0x2602 <LCD_vDisplayNumber+0x80>
		{
			LCD_vDisplayChar(Array[i]+48);
		}
	}
}
    262a:	2b 96       	adiw	r28, 0x0b	; 11
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <LCD_vGoToRowCol>:

//Function to change cursor location
void LCD_vGoToRowCol(u8 Copy_u8RowNumber, u8 Copy_u8ColNumber){
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <LCD_vGoToRowCol+0x6>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <LCD_vGoToRowCol+0x8>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8ColNumber >= 0) || (Copy_u8ColNumber <= 0))
	{
		switch(Copy_u8RowNumber)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3c 83       	std	Y+4, r19	; 0x04
    2654:	2b 83       	std	Y+3, r18	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	91 05       	cpc	r25, r1
    265e:	31 f0       	breq	.+12     	; 0x266c <LCD_vGoToRowCol+0x30>
    2660:	2b 81       	ldd	r18, Y+3	; 0x03
    2662:	3c 81       	ldd	r19, Y+4	; 0x04
    2664:	22 30       	cpi	r18, 0x02	; 2
    2666:	31 05       	cpc	r19, r1
    2668:	31 f0       	breq	.+12     	; 0x2676 <LCD_vGoToRowCol+0x3a>
    266a:	09 c0       	rjmp	.+18     	; 0x267e <LCD_vGoToRowCol+0x42>
		{
		case ROW_ONE: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_ONE_ADD | Copy_u8ColNumber)); break;
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	80 68       	ori	r24, 0x80	; 128
    2670:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    2674:	04 c0       	rjmp	.+8      	; 0x267e <LCD_vGoToRowCol+0x42>
		case ROW_TWO: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_TWO_ADD | Copy_u8ColNumber)); break;
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	80 6c       	ori	r24, 0xC0	; 192
    267a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
	}
	else
	{
		LCD_vDisplayString("Error, column number exceeded 15");
	}
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_vShiftDisplay>:

//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	a4 97       	sbiw	r28, 0x24	; 36
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	89 a3       	std	Y+33, r24	; 0x21
    26a2:	6a a3       	std	Y+34, r22	; 0x22
	switch(Copy_u8ShiftDirection)
    26a4:	89 a1       	ldd	r24, Y+33	; 0x21
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	3c a3       	std	Y+36, r19	; 0x24
    26ac:	2b a3       	std	Y+35, r18	; 0x23
    26ae:	8b a1       	ldd	r24, Y+35	; 0x23
    26b0:	9c a1       	ldd	r25, Y+36	; 0x24
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	91 05       	cpc	r25, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <LCD_vShiftDisplay+0x2e>
    26b8:	8d c0       	rjmp	.+282    	; 0x27d4 <LCD_vShiftDisplay+0x148>
    26ba:	2b a1       	ldd	r18, Y+35	; 0x23
    26bc:	3c a1       	ldd	r19, Y+36	; 0x24
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <LCD_vShiftDisplay+0x3a>
    26c4:	0d c1       	rjmp	.+538    	; 0x28e0 <LCD_vShiftDisplay+0x254>
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    26c6:	18 a2       	std	Y+32, r1	; 0x20
    26c8:	1f 8e       	std	Y+31, r1	; 0x1f
    26ca:	7a c0       	rjmp	.+244    	; 0x27c0 <LCD_vShiftDisplay+0x134>
	{
		LCD_vSendCmd(SHIFT_LEFT);
    26cc:	88 e1       	ldi	r24, 0x18	; 24
    26ce:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a8 ec       	ldi	r26, 0xC8	; 200
    26d8:	b2 e4       	ldi	r27, 0x42	; 66
    26da:	89 8f       	std	Y+25, r24	; 0x19
    26dc:	9a 8f       	std	Y+26, r25	; 0x1a
    26de:	ab 8f       	std	Y+27, r26	; 0x1b
    26e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	69 8d       	ldd	r22, Y+25	; 0x19
    26e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a ef       	ldi	r20, 0xFA	; 250
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8d 8b       	std	Y+21, r24	; 0x15
    26fc:	9e 8b       	std	Y+22, r25	; 0x16
    26fe:	af 8b       	std	Y+23, r26	; 0x17
    2700:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2702:	6d 89       	ldd	r22, Y+21	; 0x15
    2704:	7e 89       	ldd	r23, Y+22	; 0x16
    2706:	8f 89       	ldd	r24, Y+23	; 0x17
    2708:	98 8d       	ldd	r25, Y+24	; 0x18
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <LCD_vShiftDisplay+0x98>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9c 8b       	std	Y+20, r25	; 0x14
    2720:	8b 8b       	std	Y+19, r24	; 0x13
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <LCD_vShiftDisplay+0x116>
	else if (__tmp > 65535)
    2724:	6d 89       	ldd	r22, Y+21	; 0x15
    2726:	7e 89       	ldd	r23, Y+22	; 0x16
    2728:	8f 89       	ldd	r24, Y+23	; 0x17
    272a:	98 8d       	ldd	r25, Y+24	; 0x18
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <LCD_vShiftDisplay+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	69 8d       	ldd	r22, Y+25	; 0x19
    273e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <LCD_vShiftDisplay+0xf8>
    2766:	88 ec       	ldi	r24, 0xC8	; 200
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	89 8b       	std	Y+17, r24	; 0x11
    276e:	89 89       	ldd	r24, Y+17	; 0x11
    2770:	9a 89       	ldd	r25, Y+18	; 0x12
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <LCD_vShiftDisplay+0xe6>
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8b 89       	ldd	r24, Y+19	; 0x13
    277c:	9c 89       	ldd	r25, Y+20	; 0x14
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8b 89       	ldd	r24, Y+19	; 0x13
    2786:	9c 89       	ldd	r25, Y+20	; 0x14
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <LCD_vShiftDisplay+0xda>
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <LCD_vShiftDisplay+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	6d 89       	ldd	r22, Y+21	; 0x15
    2790:	7e 89       	ldd	r23, Y+22	; 0x16
    2792:	8f 89       	ldd	r24, Y+23	; 0x17
    2794:	98 8d       	ldd	r25, Y+24	; 0x18
    2796:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	98 8b       	std	Y+16, r25	; 0x10
    27a8:	8f 87       	std	Y+15, r24	; 0x0f
    27aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ac:	98 89       	ldd	r25, Y+16	; 0x10
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_vShiftDisplay+0x122>
    27b2:	98 8b       	std	Y+16, r25	; 0x10
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
	switch(Copy_u8ShiftDirection)
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	98 a3       	std	Y+32, r25	; 0x20
    27be:	8f 8f       	std	Y+31, r24	; 0x1f
    27c0:	8a a1       	ldd	r24, Y+34	; 0x22
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ca:	82 17       	cp	r24, r18
    27cc:	93 07       	cpc	r25, r19
    27ce:	0c f4       	brge	.+2      	; 0x27d2 <LCD_vShiftDisplay+0x146>
    27d0:	7d cf       	rjmp	.-262    	; 0x26cc <LCD_vShiftDisplay+0x40>
    27d2:	86 c0       	rjmp	.+268    	; 0x28e0 <LCD_vShiftDisplay+0x254>
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27d4:	1e 8e       	std	Y+30, r1	; 0x1e
    27d6:	1d 8e       	std	Y+29, r1	; 0x1d
    27d8:	7a c0       	rjmp	.+244    	; 0x28ce <LCD_vShiftDisplay+0x242>
	{
		LCD_vSendCmd(SHIFT_RIGHT);
    27da:	8c e1       	ldi	r24, 0x1C	; 28
    27dc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a8 ec       	ldi	r26, 0xC8	; 200
    27e6:	b2 e4       	ldi	r27, 0x42	; 66
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_vShiftDisplay+0x1a6>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_vShiftDisplay+0x224>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_vShiftDisplay+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_vShiftDisplay+0x206>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_vShiftDisplay+0x1f4>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_vShiftDisplay+0x1e8>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_vShiftDisplay+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_vShiftDisplay+0x230>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    28c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	9e 8f       	std	Y+30, r25	; 0x1e
    28cc:	8d 8f       	std	Y+29, r24	; 0x1d
    28ce:	8a a1       	ldd	r24, Y+34	; 0x22
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d8:	82 17       	cp	r24, r18
    28da:	93 07       	cpc	r25, r19
    28dc:	0c f4       	brge	.+2      	; 0x28e0 <LCD_vShiftDisplay+0x254>
    28de:	7d cf       	rjmp	.-262    	; 0x27da <LCD_vShiftDisplay+0x14e>
		LCD_vSendCmd(SHIFT_RIGHT);
		_delay_ms(100);
	}
	break;
	}
}
    28e0:	a4 96       	adiw	r28, 0x24	; 36
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <LCD_vStoreSpecChar>:

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	63 97       	sbiw	r28, 0x13	; 19
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	9a 8b       	std	Y+18, r25	; 0x12
    2908:	89 8b       	std	Y+17, r24	; 0x11
    290a:	6b 8b       	std	Y+19, r22	; 0x13
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	80 64       	ori	r24, 0x40	; 64
    2920:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_vSendCmd>
	for(int i=0; i<8;i++)
    2924:	18 8a       	std	Y+16, r1	; 0x10
    2926:	1f 86       	std	Y+15, r1	; 0x0f
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <LCD_vStoreSpecChar+0x56>
	{
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
    292a:	2f 85       	ldd	r18, Y+15	; 0x0f
    292c:	38 89       	ldd	r19, Y+16	; 0x10
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	9a 89       	ldd	r25, Y+18	; 0x12
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	80 81       	ld	r24, Z
    293a:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_vDisplayChar>

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
	for(int i=0; i<8;i++)
    293e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2940:	98 89       	ldd	r25, Y+16	; 0x10
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	98 8b       	std	Y+16, r25	; 0x10
    2946:	8f 87       	std	Y+15, r24	; 0x0f
    2948:	8f 85       	ldd	r24, Y+15	; 0x0f
    294a:	98 89       	ldd	r25, Y+16	; 0x10
    294c:	88 30       	cpi	r24, 0x08	; 8
    294e:	91 05       	cpc	r25, r1
    2950:	64 f3       	brlt	.-40     	; 0x292a <LCD_vStoreSpecChar+0x38>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a8 ec       	ldi	r26, 0xC8	; 200
    2958:	b2 e4       	ldi	r27, 0x42	; 66
    295a:	8b 87       	std	Y+11, r24	; 0x0b
    295c:	9c 87       	std	Y+12, r25	; 0x0c
    295e:	ad 87       	std	Y+13, r26	; 0x0d
    2960:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6b 85       	ldd	r22, Y+11	; 0x0b
    2964:	7c 85       	ldd	r23, Y+12	; 0x0c
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8f 83       	std	Y+7, r24	; 0x07
    297c:	98 87       	std	Y+8, r25	; 0x08
    297e:	a9 87       	std	Y+9, r26	; 0x09
    2980:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_vStoreSpecChar+0xb2>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <LCD_vStoreSpecChar+0x130>
	else if (__tmp > 65535)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <LCD_vStoreSpecChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <LCD_vStoreSpecChar+0x112>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	8b 83       	std	Y+3, r24	; 0x03
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_vStoreSpecChar+0x100>
    29f6:	9c 83       	std	Y+4, r25	; 0x04
    29f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <LCD_vStoreSpecChar+0xf4>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <LCD_vStoreSpecChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_vStoreSpecChar+0x13c>
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
		//LCD_vSendCmd(0b01000000 | i);
	}
	_delay_ms(100);

}
    2a36:	63 96       	adiw	r28, 0x13	; 19
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <KPD_vInitKeypad>:

const u8 GLOBAL_u8AcolNumber [4] = {KPD_C1, KPD_C2, KPD_C3, KPD_C4};


//This function will initialize the keypad ports
void KPD_vInitKeypad(void){
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSet4LSBDir(KPD_PORT, OUTPUT);
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	0e 94 cd 09 	call	0x139a	; 0x139a <DIO_vSet4LSBDir>
	DIO_vSet4LSBValue(KPD_PORT, HIGH);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_vSet4LSBValue>
	DIO_vSet4MSBDir(KPD_PORT, INPUT);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_vSet4MSBDir>
	DIO_vSet4MSBValue(KPD_PORT, HIGH);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_vSet4MSBValue>


}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <KPD_vGetPressedKey>:


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	64 97       	sbiw	r28, 0x14	; 20
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
    2a8e:	1f 86       	std	Y+15, r1	; 0x0f
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2a90:	1a 8a       	std	Y+18, r1	; 0x12
    2a92:	cf c0       	rjmp	.+414    	; 0x2c32 <KPD_vGetPressedKey+0x1bc>
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
    2a94:	8a 89       	ldd	r24, Y+18	; 0x12
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e8 58       	subi	r30, 0x88	; 136
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	90 81       	ld	r25, Z
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	69 2f       	mov	r22, r25
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2aac:	19 8a       	std	Y+17, r1	; 0x11
    2aae:	ab c0       	rjmp	.+342    	; 0x2c06 <KPD_vGetPressedKey+0x190>
		{
			LOCAL_u8PinValue = DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]);
    2ab0:	89 89       	ldd	r24, Y+17	; 0x11
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e4 58       	subi	r30, 0x84	; 132
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	90 81       	ld	r25, Z
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	69 2f       	mov	r22, r25
    2ac2:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8ReadPinValue>
    2ac6:	88 8b       	std	Y+16, r24	; 0x10
			if (LOCAL_u8PinValue == BTN_PRESSED)
    2ac8:	88 89       	ldd	r24, Y+16	; 0x10
    2aca:	88 23       	and	r24, r24
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <KPD_vGetPressedKey+0x5a>
    2ace:	98 c0       	rjmp	.+304    	; 0x2c00 <KPD_vGetPressedKey+0x18a>
    2ad0:	72 c0       	rjmp	.+228    	; 0x2bb6 <KPD_vGetPressedKey+0x140>
			{
				while(DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]) == BTN_PRESSED)
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a8 e4       	ldi	r26, 0x48	; 72
    2ad8:	b2 e4       	ldi	r27, 0x42	; 66
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a ef       	ldi	r20, 0xFA	; 250
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <KPD_vGetPressedKey+0xae>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <KPD_vGetPressedKey+0x12c>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <KPD_vGetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <KPD_vGetPressedKey+0x10e>
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <KPD_vGetPressedKey+0xfc>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <KPD_vGetPressedKey+0xf0>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <KPD_vGetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <KPD_vGetPressedKey+0x138>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	89 89       	ldd	r24, Y+17	; 0x11
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e4 58       	subi	r30, 0x84	; 132
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	90 81       	ld	r25, Z
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8ReadPinValue>
    2bcc:	88 23       	and	r24, r24
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <KPD_vGetPressedKey+0x15c>
    2bd0:	80 cf       	rjmp	.-256    	; 0x2ad2 <KPD_vGetPressedKey+0x5c>
				{
					_delay_ms(50);
				}
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
    2bd2:	8a 89       	ldd	r24, Y+18	; 0x12
    2bd4:	48 2f       	mov	r20, r24
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	89 89       	ldd	r24, Y+17	; 0x11
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	ca 01       	movw	r24, r20
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	82 0f       	add	r24, r18
    2bea:	93 1f       	adc	r25, r19
    2bec:	fc 01       	movw	r30, r24
    2bee:	e8 59       	subi	r30, 0x98	; 152
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	eb 89       	ldd	r30, Y+19	; 0x13
    2bf6:	fc 89       	ldd	r31, Y+20	; 0x14
    2bf8:	80 83       	st	Z, r24
				LOCAL_u8Flag = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <KPD_vGetPressedKey+0x198>
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2c00:	89 89       	ldd	r24, Y+17	; 0x11
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	89 8b       	std	Y+17, r24	; 0x11
    2c06:	89 89       	ldd	r24, Y+17	; 0x11
    2c08:	84 30       	cpi	r24, 0x04	; 4
    2c0a:	08 f4       	brcc	.+2      	; 0x2c0e <KPD_vGetPressedKey+0x198>
    2c0c:	51 cf       	rjmp	.-350    	; 0x2ab0 <KPD_vGetPressedKey+0x3a>
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
				LOCAL_u8Flag = 1;
				break;
			}
		}
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], HIGH);
    2c0e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	fc 01       	movw	r30, r24
    2c16:	e8 58       	subi	r30, 0x88	; 136
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	90 81       	ld	r25, Z
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	69 2f       	mov	r22, r25
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
		if(LOCAL_u8Flag == 1)
    2c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	39 f0       	breq	.+14     	; 0x2c3a <KPD_vGetPressedKey+0x1c4>


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2c2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	8a 8b       	std	Y+18, r24	; 0x12
    2c32:	8a 89       	ldd	r24, Y+18	; 0x12
    2c34:	84 30       	cpi	r24, 0x04	; 4
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <KPD_vGetPressedKey+0x1c4>
    2c38:	2d cf       	rjmp	.-422    	; 0x2a94 <KPD_vGetPressedKey+0x1e>
		if(LOCAL_u8Flag == 1)
		{
			break;
		}
	}
}
    2c3a:	64 96       	adiw	r28, 0x14	; 20
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <main>:
#include "../../MCAL/ATMEGA32/GIE/GIE_interface.h"
#include <util/delay.h>
#define F_CPU 8000000UL

void main(void)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	6c 97       	sbiw	r28, 0x1c	; 28
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDir(PORTC, PIN7, OUTPUT);
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	67 e0       	ldi	r22, 0x07	; 7
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTC, PIN7, HIGH);
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	67 e0       	ldi	r22, 0x07	; 7
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
	DIO_vSetPinDir(PORTC, PIN6, OUTPUT);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	66 e0       	ldi	r22, 0x06	; 6
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinDir(PORTC, PIN5, OUTPUT);
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	65 e0       	ldi	r22, 0x05	; 5
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinDir(PORTD, PIN2, INPUT);
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTD, PIN2, HIGH);
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
	DIO_vSetPinDir(PORTD, PIN3, INPUT);
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	63 e0       	ldi	r22, 0x03	; 3
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTD, PIN3, HIGH);
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	63 e0       	ldi	r22, 0x03	; 3
    2caa:	41 e0       	ldi	r20, 0x01	; 1
    2cac:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
	EXTI_vEnablePin(INT0_PIN);
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <EXTI_vEnablePin>
	EXTI_vEnablePin(INT1_PIN);
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <EXTI_vEnablePin>
	GIE_vEnableInterrupts();
    2cbc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GIE_vEnableInterrupts>
	while(1)
	{
		DIO_vSetPinValue(PORTC, PIN7, HIGH);
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	aa e7       	ldi	r26, 0x7A	; 122
    2cd0:	b3 e4       	ldi	r27, 0x43	; 67
    2cd2:	89 8f       	std	Y+25, r24	; 0x19
    2cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	69 8d       	ldd	r22, Y+25	; 0x19
    2cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8d 8b       	std	Y+21, r24	; 0x15
    2cf4:	9e 8b       	std	Y+22, r25	; 0x16
    2cf6:	af 8b       	std	Y+23, r26	; 0x17
    2cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2d00:	98 8d       	ldd	r25, Y+24	; 0x18
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <main+0xd0>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9c 8b       	std	Y+20, r25	; 0x14
    2d18:	8b 8b       	std	Y+19, r24	; 0x13
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <main+0x14e>
	else if (__tmp > 65535)
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	69 8d       	ldd	r22, Y+25	; 0x19
    2d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9c 8b       	std	Y+20, r25	; 0x14
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <main+0x130>
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9a 8b       	std	Y+18, r25	; 0x12
    2d64:	89 8b       	std	Y+17, r24	; 0x11
    2d66:	89 89       	ldd	r24, Y+17	; 0x11
    2d68:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <main+0x11e>
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <main+0x112>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	6d 89       	ldd	r22, Y+21	; 0x15
    2d88:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9c 8b       	std	Y+20, r25	; 0x14
    2d98:	8b 8b       	std	Y+19, r24	; 0x13
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	98 8b       	std	Y+16, r25	; 0x10
    2da0:	8f 87       	std	Y+15, r24	; 0x0f
    2da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da4:	98 89       	ldd	r25, Y+16	; 0x10
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <main+0x15a>
    2daa:	98 8b       	std	Y+16, r25	; 0x10
    2dac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		DIO_vSetPinValue(PORTC, PIN7, LOW);
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	67 e0       	ldi	r22, 0x07	; 7
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	aa e7       	ldi	r26, 0x7A	; 122
    2dbe:	b3 e4       	ldi	r27, 0x43	; 67
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a ef       	ldi	r20, 0xFA	; 250
    2dd6:	54 e4       	ldi	r21, 0x44	; 68
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <main+0x1be>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <main+0x23c>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <main+0x21e>
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <main+0x20c>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <main+0x200>
    2e72:	26 cf       	rjmp	.-436    	; 0x2cc0 <main+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <main+0x248>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	11 cf       	rjmp	.-478    	; 0x2cc0 <main+0x74>

00002e9e <__vector_1>:
	}
}

void __vector_1 () __attribute__((signal));
void __vector_1 ()
{
    2e9e:	1f 92       	push	r1
    2ea0:	0f 92       	push	r0
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	ef 93       	push	r30
    2ebe:	ff 93       	push	r31
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	6c 97       	sbiw	r28, 0x1c	; 28
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinValue(PORTC, PIN6, HIGH);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	66 e0       	ldi	r22, 0x06	; 6
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	aa e7       	ldi	r26, 0x7A	; 122
    2ede:	b3 e4       	ldi	r27, 0x43	; 67
    2ee0:	89 8f       	std	Y+25, r24	; 0x19
    2ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4a ef       	ldi	r20, 0xFA	; 250
    2ef6:	54 e4       	ldi	r21, 0x44	; 68
    2ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8d 8b       	std	Y+21, r24	; 0x15
    2f02:	9e 8b       	std	Y+22, r25	; 0x16
    2f04:	af 8b       	std	Y+23, r26	; 0x17
    2f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f08:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	2c f4       	brge	.+10     	; 0x2f2a <__vector_1+0x8c>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9c 8b       	std	Y+20, r25	; 0x14
    2f26:	8b 8b       	std	Y+19, r24	; 0x13
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <__vector_1+0x10a>
	else if (__tmp > 65535)
    2f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	98 8d       	ldd	r25, Y+24	; 0x18
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	4c f5       	brge	.+82     	; 0x2f94 <__vector_1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f42:	69 8d       	ldd	r22, Y+25	; 0x19
    2f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9c 8b       	std	Y+20, r25	; 0x14
    2f68:	8b 8b       	std	Y+19, r24	; 0x13
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <__vector_1+0xec>
    2f6c:	88 ec       	ldi	r24, 0xC8	; 200
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9a 8b       	std	Y+18, r25	; 0x12
    2f72:	89 8b       	std	Y+17, r24	; 0x11
    2f74:	89 89       	ldd	r24, Y+17	; 0x11
    2f76:	9a 89       	ldd	r25, Y+18	; 0x12
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <__vector_1+0xda>
    2f7c:	9a 8b       	std	Y+18, r25	; 0x12
    2f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	8b 89       	ldd	r24, Y+19	; 0x13
    2f82:	9c 89       	ldd	r25, Y+20	; 0x14
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	9c 8b       	std	Y+20, r25	; 0x14
    2f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <__vector_1+0xce>
    2f92:	14 c0       	rjmp	.+40     	; 0x2fbc <__vector_1+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	6d 89       	ldd	r22, Y+21	; 0x15
    2f96:	7e 89       	ldd	r23, Y+22	; 0x16
    2f98:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9c 8b       	std	Y+20, r25	; 0x14
    2fa6:	8b 8b       	std	Y+19, r24	; 0x13
    2fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2faa:	9c 89       	ldd	r25, Y+20	; 0x14
    2fac:	98 8b       	std	Y+16, r25	; 0x10
    2fae:	8f 87       	std	Y+15, r24	; 0x0f
    2fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb2:	98 89       	ldd	r25, Y+16	; 0x10
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <__vector_1+0x116>
    2fb8:	98 8b       	std	Y+16, r25	; 0x10
    2fba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	DIO_vSetPinValue(PORTC, PIN6, LOW);
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	66 e0       	ldi	r22, 0x06	; 6
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	aa e7       	ldi	r26, 0x7A	; 122
    2fcc:	b3 e4       	ldi	r27, 0x43	; 67
    2fce:	8b 87       	std	Y+11, r24	; 0x0b
    2fd0:	9c 87       	std	Y+12, r25	; 0x0c
    2fd2:	ad 87       	std	Y+13, r26	; 0x0d
    2fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a ef       	ldi	r20, 0xFA	; 250
    2fe4:	54 e4       	ldi	r21, 0x44	; 68
    2fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8f 83       	std	Y+7, r24	; 0x07
    2ff0:	98 87       	std	Y+8, r25	; 0x08
    2ff2:	a9 87       	std	Y+9, r26	; 0x09
    2ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	2c f4       	brge	.+10     	; 0x3018 <__vector_1+0x17a>
		__ticks = 1;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	3f c0       	rjmp	.+126    	; 0x3096 <__vector_1+0x1f8>
	else if (__tmp > 65535)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	4c f5       	brge	.+82     	; 0x3082 <__vector_1+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	6b 85       	ldd	r22, Y+11	; 0x0b
    3032:	7c 85       	ldd	r23, Y+12	; 0x0c
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <__vector_1+0x1da>
    305a:	88 ec       	ldi	r24, 0xC8	; 200
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9c 83       	std	Y+4, r25	; 0x04
    3060:	8b 83       	std	Y+3, r24	; 0x03
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <__vector_1+0x1c8>
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <__vector_1+0x1bc>
    3080:	14 c0       	rjmp	.+40     	; 0x30aa <__vector_1+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6f 81       	ldd	r22, Y+7	; 0x07
    3084:	78 85       	ldd	r23, Y+8	; 0x08
    3086:	89 85       	ldd	r24, Y+9	; 0x09
    3088:	9a 85       	ldd	r25, Y+10	; 0x0a
    308a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <__vector_1+0x204>
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
}
    30aa:	6c 96       	adiw	r28, 0x1c	; 28
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	ff 91       	pop	r31
    30b6:	ef 91       	pop	r30
    30b8:	bf 91       	pop	r27
    30ba:	af 91       	pop	r26
    30bc:	9f 91       	pop	r25
    30be:	8f 91       	pop	r24
    30c0:	7f 91       	pop	r23
    30c2:	6f 91       	pop	r22
    30c4:	5f 91       	pop	r21
    30c6:	4f 91       	pop	r20
    30c8:	3f 91       	pop	r19
    30ca:	2f 91       	pop	r18
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	0f 90       	pop	r0
    30d2:	1f 90       	pop	r1
    30d4:	18 95       	reti

000030d6 <__vector_2>:
void __vector_2 () __attribute__((signal));
void __vector_2 ()
{
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
    30e0:	2f 93       	push	r18
    30e2:	3f 93       	push	r19
    30e4:	4f 93       	push	r20
    30e6:	5f 93       	push	r21
    30e8:	6f 93       	push	r22
    30ea:	7f 93       	push	r23
    30ec:	8f 93       	push	r24
    30ee:	9f 93       	push	r25
    30f0:	af 93       	push	r26
    30f2:	bf 93       	push	r27
    30f4:	ef 93       	push	r30
    30f6:	ff 93       	push	r31
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	6c 97       	sbiw	r28, 0x1c	; 28
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinValue(PORTC, PIN5, HIGH);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	65 e0       	ldi	r22, 0x05	; 5
    310a:	41 e0       	ldi	r20, 0x01	; 1
    310c:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	aa e7       	ldi	r26, 0x7A	; 122
    3116:	b3 e4       	ldi	r27, 0x43	; 67
    3118:	89 8f       	std	Y+25, r24	; 0x19
    311a:	9a 8f       	std	Y+26, r25	; 0x1a
    311c:	ab 8f       	std	Y+27, r26	; 0x1b
    311e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a ef       	ldi	r20, 0xFA	; 250
    312e:	54 e4       	ldi	r21, 0x44	; 68
    3130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8d 8b       	std	Y+21, r24	; 0x15
    313a:	9e 8b       	std	Y+22, r25	; 0x16
    313c:	af 8b       	std	Y+23, r26	; 0x17
    313e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3140:	6d 89       	ldd	r22, Y+21	; 0x15
    3142:	7e 89       	ldd	r23, Y+22	; 0x16
    3144:	8f 89       	ldd	r24, Y+23	; 0x17
    3146:	98 8d       	ldd	r25, Y+24	; 0x18
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <__vector_2+0x8c>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9c 8b       	std	Y+20, r25	; 0x14
    315e:	8b 8b       	std	Y+19, r24	; 0x13
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <__vector_2+0x10a>
	else if (__tmp > 65535)
    3162:	6d 89       	ldd	r22, Y+21	; 0x15
    3164:	7e 89       	ldd	r23, Y+22	; 0x16
    3166:	8f 89       	ldd	r24, Y+23	; 0x17
    3168:	98 8d       	ldd	r25, Y+24	; 0x18
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	69 8d       	ldd	r22, Y+25	; 0x19
    317c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9c 8b       	std	Y+20, r25	; 0x14
    31a0:	8b 8b       	std	Y+19, r24	; 0x13
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <__vector_2+0xec>
    31a4:	88 ec       	ldi	r24, 0xC8	; 200
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9a 8b       	std	Y+18, r25	; 0x12
    31aa:	89 8b       	std	Y+17, r24	; 0x11
    31ac:	89 89       	ldd	r24, Y+17	; 0x11
    31ae:	9a 89       	ldd	r25, Y+18	; 0x12
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <__vector_2+0xda>
    31b4:	9a 8b       	std	Y+18, r25	; 0x12
    31b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ba:	9c 89       	ldd	r25, Y+20	; 0x14
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9c 8b       	std	Y+20, r25	; 0x14
    31c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <__vector_2+0xce>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6d 89       	ldd	r22, Y+21	; 0x15
    31ce:	7e 89       	ldd	r23, Y+22	; 0x16
    31d0:	8f 89       	ldd	r24, Y+23	; 0x17
    31d2:	98 8d       	ldd	r25, Y+24	; 0x18
    31d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9c 8b       	std	Y+20, r25	; 0x14
    31de:	8b 8b       	std	Y+19, r24	; 0x13
    31e0:	8b 89       	ldd	r24, Y+19	; 0x13
    31e2:	9c 89       	ldd	r25, Y+20	; 0x14
    31e4:	98 8b       	std	Y+16, r25	; 0x10
    31e6:	8f 87       	std	Y+15, r24	; 0x0f
    31e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ea:	98 89       	ldd	r25, Y+16	; 0x10
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <__vector_2+0x116>
    31f0:	98 8b       	std	Y+16, r25	; 0x10
    31f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	DIO_vSetPinValue(PORTC, PIN5, LOW);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	65 e0       	ldi	r22, 0x05	; 5
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 57 07 	call	0xeae	; 0xeae <DIO_vSetPinValue>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	aa e7       	ldi	r26, 0x7A	; 122
    3204:	b3 e4       	ldi	r27, 0x43	; 67
    3206:	8b 87       	std	Y+11, r24	; 0x0b
    3208:	9c 87       	std	Y+12, r25	; 0x0c
    320a:	ad 87       	std	Y+13, r26	; 0x0d
    320c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3210:	7c 85       	ldd	r23, Y+12	; 0x0c
    3212:	8d 85       	ldd	r24, Y+13	; 0x0d
    3214:	9e 85       	ldd	r25, Y+14	; 0x0e
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	4a ef       	ldi	r20, 0xFA	; 250
    321c:	54 e4       	ldi	r21, 0x44	; 68
    321e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	8f 83       	std	Y+7, r24	; 0x07
    3228:	98 87       	std	Y+8, r25	; 0x08
    322a:	a9 87       	std	Y+9, r26	; 0x09
    322c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322e:	6f 81       	ldd	r22, Y+7	; 0x07
    3230:	78 85       	ldd	r23, Y+8	; 0x08
    3232:	89 85       	ldd	r24, Y+9	; 0x09
    3234:	9a 85       	ldd	r25, Y+10	; 0x0a
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	2c f4       	brge	.+10     	; 0x3250 <__vector_2+0x17a>
		__ticks = 1;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	3f c0       	rjmp	.+126    	; 0x32ce <__vector_2+0x1f8>
	else if (__tmp > 65535)
    3250:	6f 81       	ldd	r22, Y+7	; 0x07
    3252:	78 85       	ldd	r23, Y+8	; 0x08
    3254:	89 85       	ldd	r24, Y+9	; 0x09
    3256:	9a 85       	ldd	r25, Y+10	; 0x0a
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	3f ef       	ldi	r19, 0xFF	; 255
    325c:	4f e7       	ldi	r20, 0x7F	; 127
    325e:	57 e4       	ldi	r21, 0x47	; 71
    3260:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3264:	18 16       	cp	r1, r24
    3266:	4c f5       	brge	.+82     	; 0x32ba <__vector_2+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3268:	6b 85       	ldd	r22, Y+11	; 0x0b
    326a:	7c 85       	ldd	r23, Y+12	; 0x0c
    326c:	8d 85       	ldd	r24, Y+13	; 0x0d
    326e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e2       	ldi	r20, 0x20	; 32
    3276:	51 e4       	ldi	r21, 0x41	; 65
    3278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	0f c0       	rjmp	.+30     	; 0x32b0 <__vector_2+0x1da>
    3292:	88 ec       	ldi	r24, 0xC8	; 200
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	9c 81       	ldd	r25, Y+4	; 0x04
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <__vector_2+0x1c8>
    32a2:	9c 83       	std	Y+4, r25	; 0x04
    32a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	69 f7       	brne	.-38     	; 0x3292 <__vector_2+0x1bc>
    32b8:	14 c0       	rjmp	.+40     	; 0x32e2 <__vector_2+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	9a 81       	ldd	r25, Y+2	; 0x02
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <__vector_2+0x204>
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
}
    32e2:	6c 96       	adiw	r28, 0x1c	; 28
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	bf 91       	pop	r27
    32f2:	af 91       	pop	r26
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	7f 91       	pop	r23
    32fa:	6f 91       	pop	r22
    32fc:	5f 91       	pop	r21
    32fe:	4f 91       	pop	r20
    3300:	3f 91       	pop	r19
    3302:	2f 91       	pop	r18
    3304:	0f 90       	pop	r0
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	0f 90       	pop	r0
    330a:	1f 90       	pop	r1
    330c:	18 95       	reti

0000330e <SET_Direction>:
 */

#include "DIO_Interface.h"

void SET_Direction(u8 Copy_PORT, u8 Copy_PIN, u8 Direction)//set a specific pin as input or output
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	27 97       	sbiw	r28, 0x07	; 7
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	6a 83       	std	Y+2, r22	; 0x02
    3326:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == OUTPUT)
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	09 f0       	breq	.+2      	; 0x3330 <SET_Direction+0x22>
    332e:	70 c0       	rjmp	.+224    	; 0x3410 <SET_Direction+0x102>
	{
		switch(Copy_PORT)
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	3f 83       	std	Y+7, r19	; 0x07
    3338:	2e 83       	std	Y+6, r18	; 0x06
    333a:	8e 81       	ldd	r24, Y+6	; 0x06
    333c:	9f 81       	ldd	r25, Y+7	; 0x07
    333e:	82 30       	cpi	r24, 0x02	; 2
    3340:	91 05       	cpc	r25, r1
    3342:	51 f1       	breq	.+84     	; 0x3398 <SET_Direction+0x8a>
    3344:	2e 81       	ldd	r18, Y+6	; 0x06
    3346:	3f 81       	ldd	r19, Y+7	; 0x07
    3348:	23 30       	cpi	r18, 0x03	; 3
    334a:	31 05       	cpc	r19, r1
    334c:	34 f4       	brge	.+12     	; 0x335a <SET_Direction+0x4c>
    334e:	8e 81       	ldd	r24, Y+6	; 0x06
    3350:	9f 81       	ldd	r25, Y+7	; 0x07
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	91 05       	cpc	r25, r1
    3356:	61 f0       	breq	.+24     	; 0x3370 <SET_Direction+0x62>
    3358:	d3 c0       	rjmp	.+422    	; 0x3500 <SET_Direction+0x1f2>
    335a:	2e 81       	ldd	r18, Y+6	; 0x06
    335c:	3f 81       	ldd	r19, Y+7	; 0x07
    335e:	23 30       	cpi	r18, 0x03	; 3
    3360:	31 05       	cpc	r19, r1
    3362:	71 f1       	breq	.+92     	; 0x33c0 <SET_Direction+0xb2>
    3364:	8e 81       	ldd	r24, Y+6	; 0x06
    3366:	9f 81       	ldd	r25, Y+7	; 0x07
    3368:	84 30       	cpi	r24, 0x04	; 4
    336a:	91 05       	cpc	r25, r1
    336c:	e9 f1       	breq	.+122    	; 0x33e8 <SET_Direction+0xda>
    336e:	c8 c0       	rjmp	.+400    	; 0x3500 <SET_Direction+0x1f2>
		{
		case PORTA:
			SET_BIT(DDRA_REG, Copy_PIN);
    3370:	aa e3       	ldi	r26, 0x3A	; 58
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	ea e3       	ldi	r30, 0x3A	; 58
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	48 2f       	mov	r20, r24
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	02 2e       	mov	r0, r18
    3388:	02 c0       	rjmp	.+4      	; 0x338e <SET_Direction+0x80>
    338a:	88 0f       	add	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	0a 94       	dec	r0
    3390:	e2 f7       	brpl	.-8      	; 0x338a <SET_Direction+0x7c>
    3392:	84 2b       	or	r24, r20
    3394:	8c 93       	st	X, r24
    3396:	b4 c0       	rjmp	.+360    	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, Copy_PIN);
    3398:	a7 e3       	ldi	r26, 0x37	; 55
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e7 e3       	ldi	r30, 0x37	; 55
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	48 2f       	mov	r20, r24
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	02 2e       	mov	r0, r18
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <SET_Direction+0xa8>
    33b2:	88 0f       	add	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	0a 94       	dec	r0
    33b8:	e2 f7       	brpl	.-8      	; 0x33b2 <SET_Direction+0xa4>
    33ba:	84 2b       	or	r24, r20
    33bc:	8c 93       	st	X, r24
    33be:	a0 c0       	rjmp	.+320    	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, Copy_PIN);
    33c0:	a4 e3       	ldi	r26, 0x34	; 52
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e4 e3       	ldi	r30, 0x34	; 52
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	48 2f       	mov	r20, r24
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 2e       	mov	r0, r18
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <SET_Direction+0xd0>
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	0a 94       	dec	r0
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <SET_Direction+0xcc>
    33e2:	84 2b       	or	r24, r20
    33e4:	8c 93       	st	X, r24
    33e6:	8c c0       	rjmp	.+280    	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, Copy_PIN);
    33e8:	a1 e3       	ldi	r26, 0x31	; 49
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e1 e3       	ldi	r30, 0x31	; 49
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	48 2f       	mov	r20, r24
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	02 2e       	mov	r0, r18
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <SET_Direction+0xf8>
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	0a 94       	dec	r0
    3408:	e2 f7       	brpl	.-8      	; 0x3402 <SET_Direction+0xf4>
    340a:	84 2b       	or	r24, r20
    340c:	8c 93       	st	X, r24
    340e:	78 c0       	rjmp	.+240    	; 0x3500 <SET_Direction+0x1f2>
			break;
		}
	}
	else if(Direction == INPUT)
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	88 23       	and	r24, r24
    3414:	09 f0       	breq	.+2      	; 0x3418 <SET_Direction+0x10a>
    3416:	74 c0       	rjmp	.+232    	; 0x3500 <SET_Direction+0x1f2>
	{
		switch(Copy_PORT)
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	3d 83       	std	Y+5, r19	; 0x05
    3420:	2c 83       	std	Y+4, r18	; 0x04
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	9d 81       	ldd	r25, Y+5	; 0x05
    3426:	82 30       	cpi	r24, 0x02	; 2
    3428:	91 05       	cpc	r25, r1
    342a:	61 f1       	breq	.+88     	; 0x3484 <SET_Direction+0x176>
    342c:	2c 81       	ldd	r18, Y+4	; 0x04
    342e:	3d 81       	ldd	r19, Y+5	; 0x05
    3430:	23 30       	cpi	r18, 0x03	; 3
    3432:	31 05       	cpc	r19, r1
    3434:	34 f4       	brge	.+12     	; 0x3442 <SET_Direction+0x134>
    3436:	8c 81       	ldd	r24, Y+4	; 0x04
    3438:	9d 81       	ldd	r25, Y+5	; 0x05
    343a:	81 30       	cpi	r24, 0x01	; 1
    343c:	91 05       	cpc	r25, r1
    343e:	69 f0       	breq	.+26     	; 0x345a <SET_Direction+0x14c>
    3440:	5f c0       	rjmp	.+190    	; 0x3500 <SET_Direction+0x1f2>
    3442:	2c 81       	ldd	r18, Y+4	; 0x04
    3444:	3d 81       	ldd	r19, Y+5	; 0x05
    3446:	23 30       	cpi	r18, 0x03	; 3
    3448:	31 05       	cpc	r19, r1
    344a:	89 f1       	breq	.+98     	; 0x34ae <SET_Direction+0x1a0>
    344c:	8c 81       	ldd	r24, Y+4	; 0x04
    344e:	9d 81       	ldd	r25, Y+5	; 0x05
    3450:	84 30       	cpi	r24, 0x04	; 4
    3452:	91 05       	cpc	r25, r1
    3454:	09 f4       	brne	.+2      	; 0x3458 <SET_Direction+0x14a>
    3456:	40 c0       	rjmp	.+128    	; 0x34d8 <SET_Direction+0x1ca>
    3458:	53 c0       	rjmp	.+166    	; 0x3500 <SET_Direction+0x1f2>
		{
		case PORTA:
			CLR_BIT(DDRA_REG, Copy_PIN);
    345a:	aa e3       	ldi	r26, 0x3A	; 58
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	ea e3       	ldi	r30, 0x3A	; 58
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	48 2f       	mov	r20, r24
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	02 2e       	mov	r0, r18
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <SET_Direction+0x16a>
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	0a 94       	dec	r0
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <SET_Direction+0x166>
    347c:	80 95       	com	r24
    347e:	84 23       	and	r24, r20
    3480:	8c 93       	st	X, r24
    3482:	3e c0       	rjmp	.+124    	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, Copy_PIN);
    3484:	a7 e3       	ldi	r26, 0x37	; 55
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e7 e3       	ldi	r30, 0x37	; 55
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	48 2f       	mov	r20, r24
    3490:	8a 81       	ldd	r24, Y+2	; 0x02
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	02 2e       	mov	r0, r18
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <SET_Direction+0x194>
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	0a 94       	dec	r0
    34a4:	e2 f7       	brpl	.-8      	; 0x349e <SET_Direction+0x190>
    34a6:	80 95       	com	r24
    34a8:	84 23       	and	r24, r20
    34aa:	8c 93       	st	X, r24
    34ac:	29 c0       	rjmp	.+82     	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, Copy_PIN);
    34ae:	a4 e3       	ldi	r26, 0x34	; 52
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	e4 e3       	ldi	r30, 0x34	; 52
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	48 2f       	mov	r20, r24
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	02 2e       	mov	r0, r18
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <SET_Direction+0x1be>
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	0a 94       	dec	r0
    34ce:	e2 f7       	brpl	.-8      	; 0x34c8 <SET_Direction+0x1ba>
    34d0:	80 95       	com	r24
    34d2:	84 23       	and	r24, r20
    34d4:	8c 93       	st	X, r24
    34d6:	14 c0       	rjmp	.+40     	; 0x3500 <SET_Direction+0x1f2>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, Copy_PIN);
    34d8:	a1 e3       	ldi	r26, 0x31	; 49
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e1 e3       	ldi	r30, 0x31	; 49
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	48 2f       	mov	r20, r24
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	02 2e       	mov	r0, r18
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <SET_Direction+0x1e8>
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	0a 94       	dec	r0
    34f8:	e2 f7       	brpl	.-8      	; 0x34f2 <SET_Direction+0x1e4>
    34fa:	80 95       	com	r24
    34fc:	84 23       	and	r24, r20
    34fe:	8c 93       	st	X, r24
			break;
		}
	}
}
    3500:	27 96       	adiw	r28, 0x07	; 7
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	cf 91       	pop	r28
    350e:	df 91       	pop	r29
    3510:	08 95       	ret

00003512 <SET_State>:

void SET_State(u8 Copy_PORT, u8 Copy_PIN, u8 State)//set a specific output pin as high or low
{
    3512:	df 93       	push	r29
    3514:	cf 93       	push	r28
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	27 97       	sbiw	r28, 0x07	; 7
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	6a 83       	std	Y+2, r22	; 0x02
    352a:	4b 83       	std	Y+3, r20	; 0x03
	if(State == HIGH)
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	09 f0       	breq	.+2      	; 0x3534 <SET_State+0x22>
    3532:	70 c0       	rjmp	.+224    	; 0x3614 <SET_State+0x102>
	{
		switch(Copy_PORT)
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	28 2f       	mov	r18, r24
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	3f 83       	std	Y+7, r19	; 0x07
    353c:	2e 83       	std	Y+6, r18	; 0x06
    353e:	8e 81       	ldd	r24, Y+6	; 0x06
    3540:	9f 81       	ldd	r25, Y+7	; 0x07
    3542:	82 30       	cpi	r24, 0x02	; 2
    3544:	91 05       	cpc	r25, r1
    3546:	51 f1       	breq	.+84     	; 0x359c <SET_State+0x8a>
    3548:	2e 81       	ldd	r18, Y+6	; 0x06
    354a:	3f 81       	ldd	r19, Y+7	; 0x07
    354c:	23 30       	cpi	r18, 0x03	; 3
    354e:	31 05       	cpc	r19, r1
    3550:	34 f4       	brge	.+12     	; 0x355e <SET_State+0x4c>
    3552:	8e 81       	ldd	r24, Y+6	; 0x06
    3554:	9f 81       	ldd	r25, Y+7	; 0x07
    3556:	81 30       	cpi	r24, 0x01	; 1
    3558:	91 05       	cpc	r25, r1
    355a:	61 f0       	breq	.+24     	; 0x3574 <SET_State+0x62>
    355c:	d3 c0       	rjmp	.+422    	; 0x3704 <SET_State+0x1f2>
    355e:	2e 81       	ldd	r18, Y+6	; 0x06
    3560:	3f 81       	ldd	r19, Y+7	; 0x07
    3562:	23 30       	cpi	r18, 0x03	; 3
    3564:	31 05       	cpc	r19, r1
    3566:	71 f1       	breq	.+92     	; 0x35c4 <SET_State+0xb2>
    3568:	8e 81       	ldd	r24, Y+6	; 0x06
    356a:	9f 81       	ldd	r25, Y+7	; 0x07
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	91 05       	cpc	r25, r1
    3570:	e9 f1       	breq	.+122    	; 0x35ec <SET_State+0xda>
    3572:	c8 c0       	rjmp	.+400    	; 0x3704 <SET_State+0x1f2>
		{
		case PORTA:
			SET_BIT(PORTA_REG, Copy_PIN);
    3574:	ab e3       	ldi	r26, 0x3B	; 59
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	eb e3       	ldi	r30, 0x3B	; 59
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	48 2f       	mov	r20, r24
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	02 2e       	mov	r0, r18
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <SET_State+0x80>
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	0a 94       	dec	r0
    3594:	e2 f7       	brpl	.-8      	; 0x358e <SET_State+0x7c>
    3596:	84 2b       	or	r24, r20
    3598:	8c 93       	st	X, r24
    359a:	b4 c0       	rjmp	.+360    	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, Copy_PIN);
    359c:	a8 e3       	ldi	r26, 0x38	; 56
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e8 e3       	ldi	r30, 0x38	; 56
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	48 2f       	mov	r20, r24
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	02 2e       	mov	r0, r18
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <SET_State+0xa8>
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	0a 94       	dec	r0
    35bc:	e2 f7       	brpl	.-8      	; 0x35b6 <SET_State+0xa4>
    35be:	84 2b       	or	r24, r20
    35c0:	8c 93       	st	X, r24
    35c2:	a0 c0       	rjmp	.+320    	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, Copy_PIN);
    35c4:	a5 e3       	ldi	r26, 0x35	; 53
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e5 e3       	ldi	r30, 0x35	; 53
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	48 2f       	mov	r20, r24
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	02 2e       	mov	r0, r18
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <SET_State+0xd0>
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	0a 94       	dec	r0
    35e4:	e2 f7       	brpl	.-8      	; 0x35de <SET_State+0xcc>
    35e6:	84 2b       	or	r24, r20
    35e8:	8c 93       	st	X, r24
    35ea:	8c c0       	rjmp	.+280    	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, Copy_PIN);
    35ec:	a2 e3       	ldi	r26, 0x32	; 50
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e2 e3       	ldi	r30, 0x32	; 50
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	48 2f       	mov	r20, r24
    35f8:	8a 81       	ldd	r24, Y+2	; 0x02
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	02 2e       	mov	r0, r18
    3604:	02 c0       	rjmp	.+4      	; 0x360a <SET_State+0xf8>
    3606:	88 0f       	add	r24, r24
    3608:	99 1f       	adc	r25, r25
    360a:	0a 94       	dec	r0
    360c:	e2 f7       	brpl	.-8      	; 0x3606 <SET_State+0xf4>
    360e:	84 2b       	or	r24, r20
    3610:	8c 93       	st	X, r24
    3612:	78 c0       	rjmp	.+240    	; 0x3704 <SET_State+0x1f2>
			break;
		}
	}
	else if(State == LOW)
    3614:	8b 81       	ldd	r24, Y+3	; 0x03
    3616:	88 23       	and	r24, r24
    3618:	09 f0       	breq	.+2      	; 0x361c <SET_State+0x10a>
    361a:	74 c0       	rjmp	.+232    	; 0x3704 <SET_State+0x1f2>
	{
		switch(Copy_PORT)
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	3d 83       	std	Y+5, r19	; 0x05
    3624:	2c 83       	std	Y+4, r18	; 0x04
    3626:	8c 81       	ldd	r24, Y+4	; 0x04
    3628:	9d 81       	ldd	r25, Y+5	; 0x05
    362a:	82 30       	cpi	r24, 0x02	; 2
    362c:	91 05       	cpc	r25, r1
    362e:	61 f1       	breq	.+88     	; 0x3688 <SET_State+0x176>
    3630:	2c 81       	ldd	r18, Y+4	; 0x04
    3632:	3d 81       	ldd	r19, Y+5	; 0x05
    3634:	23 30       	cpi	r18, 0x03	; 3
    3636:	31 05       	cpc	r19, r1
    3638:	34 f4       	brge	.+12     	; 0x3646 <SET_State+0x134>
    363a:	8c 81       	ldd	r24, Y+4	; 0x04
    363c:	9d 81       	ldd	r25, Y+5	; 0x05
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	91 05       	cpc	r25, r1
    3642:	69 f0       	breq	.+26     	; 0x365e <SET_State+0x14c>
    3644:	5f c0       	rjmp	.+190    	; 0x3704 <SET_State+0x1f2>
    3646:	2c 81       	ldd	r18, Y+4	; 0x04
    3648:	3d 81       	ldd	r19, Y+5	; 0x05
    364a:	23 30       	cpi	r18, 0x03	; 3
    364c:	31 05       	cpc	r19, r1
    364e:	89 f1       	breq	.+98     	; 0x36b2 <SET_State+0x1a0>
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	84 30       	cpi	r24, 0x04	; 4
    3656:	91 05       	cpc	r25, r1
    3658:	09 f4       	brne	.+2      	; 0x365c <SET_State+0x14a>
    365a:	40 c0       	rjmp	.+128    	; 0x36dc <SET_State+0x1ca>
    365c:	53 c0       	rjmp	.+166    	; 0x3704 <SET_State+0x1f2>
		{
		case PORTA:
			CLR_BIT(PORTA_REG, Copy_PIN);
    365e:	ab e3       	ldi	r26, 0x3B	; 59
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	eb e3       	ldi	r30, 0x3B	; 59
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	48 2f       	mov	r20, r24
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	28 2f       	mov	r18, r24
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	02 2e       	mov	r0, r18
    3676:	02 c0       	rjmp	.+4      	; 0x367c <SET_State+0x16a>
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	0a 94       	dec	r0
    367e:	e2 f7       	brpl	.-8      	; 0x3678 <SET_State+0x166>
    3680:	80 95       	com	r24
    3682:	84 23       	and	r24, r20
    3684:	8c 93       	st	X, r24
    3686:	3e c0       	rjmp	.+124    	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, Copy_PIN);
    3688:	a8 e3       	ldi	r26, 0x38	; 56
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e8 e3       	ldi	r30, 0x38	; 56
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	48 2f       	mov	r20, r24
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	02 2e       	mov	r0, r18
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <SET_State+0x194>
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	0a 94       	dec	r0
    36a8:	e2 f7       	brpl	.-8      	; 0x36a2 <SET_State+0x190>
    36aa:	80 95       	com	r24
    36ac:	84 23       	and	r24, r20
    36ae:	8c 93       	st	X, r24
    36b0:	29 c0       	rjmp	.+82     	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, Copy_PIN);
    36b2:	a5 e3       	ldi	r26, 0x35	; 53
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	e5 e3       	ldi	r30, 0x35	; 53
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	48 2f       	mov	r20, r24
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	02 2e       	mov	r0, r18
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <SET_State+0x1be>
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	0a 94       	dec	r0
    36d2:	e2 f7       	brpl	.-8      	; 0x36cc <SET_State+0x1ba>
    36d4:	80 95       	com	r24
    36d6:	84 23       	and	r24, r20
    36d8:	8c 93       	st	X, r24
    36da:	14 c0       	rjmp	.+40     	; 0x3704 <SET_State+0x1f2>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, Copy_PIN);
    36dc:	a2 e3       	ldi	r26, 0x32	; 50
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e2 e3       	ldi	r30, 0x32	; 50
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	48 2f       	mov	r20, r24
    36e8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ea:	28 2f       	mov	r18, r24
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	02 2e       	mov	r0, r18
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <SET_State+0x1e8>
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	0a 94       	dec	r0
    36fc:	e2 f7       	brpl	.-8      	; 0x36f6 <SET_State+0x1e4>
    36fe:	80 95       	com	r24
    3700:	84 23       	and	r24, r20
    3702:	8c 93       	st	X, r24
			break;
		}
	}
}
    3704:	27 96       	adiw	r28, 0x07	; 7
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <GET_State>:

u8 GET_State(u8 Copy_PORT, u8 Copy_PIN)//read data from input pin
{
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	00 d0       	rcall	.+0      	; 0x371c <GET_State+0x6>
    371c:	00 d0       	rcall	.+0      	; 0x371e <GET_State+0x8>
    371e:	00 d0       	rcall	.+0      	; 0x3720 <GET_State+0xa>
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	3d 83       	std	Y+5, r19	; 0x05
    3730:	2c 83       	std	Y+4, r18	; 0x04
    3732:	4c 81       	ldd	r20, Y+4	; 0x04
    3734:	5d 81       	ldd	r21, Y+5	; 0x05
    3736:	42 30       	cpi	r20, 0x02	; 2
    3738:	51 05       	cpc	r21, r1
    373a:	49 f1       	breq	.+82     	; 0x378e <GET_State+0x78>
    373c:	8c 81       	ldd	r24, Y+4	; 0x04
    373e:	9d 81       	ldd	r25, Y+5	; 0x05
    3740:	83 30       	cpi	r24, 0x03	; 3
    3742:	91 05       	cpc	r25, r1
    3744:	34 f4       	brge	.+12     	; 0x3752 <GET_State+0x3c>
    3746:	2c 81       	ldd	r18, Y+4	; 0x04
    3748:	3d 81       	ldd	r19, Y+5	; 0x05
    374a:	21 30       	cpi	r18, 0x01	; 1
    374c:	31 05       	cpc	r19, r1
    374e:	61 f0       	breq	.+24     	; 0x3768 <GET_State+0x52>
    3750:	57 c0       	rjmp	.+174    	; 0x3800 <GET_State+0xea>
    3752:	4c 81       	ldd	r20, Y+4	; 0x04
    3754:	5d 81       	ldd	r21, Y+5	; 0x05
    3756:	43 30       	cpi	r20, 0x03	; 3
    3758:	51 05       	cpc	r21, r1
    375a:	61 f1       	breq	.+88     	; 0x37b4 <GET_State+0x9e>
    375c:	8c 81       	ldd	r24, Y+4	; 0x04
    375e:	9d 81       	ldd	r25, Y+5	; 0x05
    3760:	84 30       	cpi	r24, 0x04	; 4
    3762:	91 05       	cpc	r25, r1
    3764:	d1 f1       	breq	.+116    	; 0x37da <GET_State+0xc4>
    3766:	4c c0       	rjmp	.+152    	; 0x3800 <GET_State+0xea>
	{
	case PORTA:
		return GET_BIT(PINA_REG, Copy_PIN);
    3768:	e9 e3       	ldi	r30, 0x39	; 57
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	88 2f       	mov	r24, r24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a9 01       	movw	r20, r18
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <GET_State+0x6a>
    377c:	55 95       	asr	r21
    377e:	47 95       	ror	r20
    3780:	8a 95       	dec	r24
    3782:	e2 f7       	brpl	.-8      	; 0x377c <GET_State+0x66>
    3784:	ca 01       	movw	r24, r20
    3786:	58 2f       	mov	r21, r24
    3788:	51 70       	andi	r21, 0x01	; 1
    378a:	5b 83       	std	Y+3, r21	; 0x03
    378c:	3a c0       	rjmp	.+116    	; 0x3802 <GET_State+0xec>
		break;
	case PORTB:
		return GET_BIT(PINB_REG, Copy_PIN);
    378e:	e6 e3       	ldi	r30, 0x36	; 54
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	a9 01       	movw	r20, r18
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <GET_State+0x90>
    37a2:	55 95       	asr	r21
    37a4:	47 95       	ror	r20
    37a6:	8a 95       	dec	r24
    37a8:	e2 f7       	brpl	.-8      	; 0x37a2 <GET_State+0x8c>
    37aa:	ca 01       	movw	r24, r20
    37ac:	58 2f       	mov	r21, r24
    37ae:	51 70       	andi	r21, 0x01	; 1
    37b0:	5b 83       	std	Y+3, r21	; 0x03
    37b2:	27 c0       	rjmp	.+78     	; 0x3802 <GET_State+0xec>
		break;
	case PORTC:
		return GET_BIT(PINC_REG, Copy_PIN);
    37b4:	e3 e3       	ldi	r30, 0x33	; 51
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	28 2f       	mov	r18, r24
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a9 01       	movw	r20, r18
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <GET_State+0xb6>
    37c8:	55 95       	asr	r21
    37ca:	47 95       	ror	r20
    37cc:	8a 95       	dec	r24
    37ce:	e2 f7       	brpl	.-8      	; 0x37c8 <GET_State+0xb2>
    37d0:	ca 01       	movw	r24, r20
    37d2:	58 2f       	mov	r21, r24
    37d4:	51 70       	andi	r21, 0x01	; 1
    37d6:	5b 83       	std	Y+3, r21	; 0x03
    37d8:	14 c0       	rjmp	.+40     	; 0x3802 <GET_State+0xec>
		break;
	case PORTD:
		return GET_BIT(PIND_REG, Copy_PIN);
    37da:	e0 e3       	ldi	r30, 0x30	; 48
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a9 01       	movw	r20, r18
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <GET_State+0xdc>
    37ee:	55 95       	asr	r21
    37f0:	47 95       	ror	r20
    37f2:	8a 95       	dec	r24
    37f4:	e2 f7       	brpl	.-8      	; 0x37ee <GET_State+0xd8>
    37f6:	ca 01       	movw	r24, r20
    37f8:	58 2f       	mov	r21, r24
    37fa:	51 70       	andi	r21, 0x01	; 1
    37fc:	5b 83       	std	Y+3, r21	; 0x03
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <GET_State+0xec>
    3800:	02 c0       	rjmp	.+4      	; 0x3806 <GET_State+0xf0>
		break;
	}
}
    3802:	8b 81       	ldd	r24, Y+3	; 0x03
    3804:	8e 83       	std	Y+6, r24	; 0x06
    3806:	8e 81       	ldd	r24, Y+6	; 0x06
    3808:	26 96       	adiw	r28, 0x06	; 6
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 Copy_PORT, u8 Direction)//set 4 LSB as input or output
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	00 d0       	rcall	.+0      	; 0x3820 <SET_Direction_4LSB+0x6>
    3820:	00 d0       	rcall	.+0      	; 0x3822 <SET_Direction_4LSB+0x8>
    3822:	00 d0       	rcall	.+0      	; 0x3824 <SET_Direction_4LSB+0xa>
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	81 30       	cpi	r24, 0x01	; 1
    3830:	09 f0       	breq	.+2      	; 0x3834 <SET_Direction_4LSB+0x1a>
    3832:	3f c0       	rjmp	.+126    	; 0x38b2 <SET_Direction_4LSB+0x98>
	{
		switch(Copy_PORT)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	3e 83       	std	Y+6, r19	; 0x06
    383c:	2d 83       	std	Y+5, r18	; 0x05
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
    3840:	9e 81       	ldd	r25, Y+6	; 0x06
    3842:	82 30       	cpi	r24, 0x02	; 2
    3844:	91 05       	cpc	r25, r1
    3846:	f1 f0       	breq	.+60     	; 0x3884 <SET_Direction_4LSB+0x6a>
    3848:	2d 81       	ldd	r18, Y+5	; 0x05
    384a:	3e 81       	ldd	r19, Y+6	; 0x06
    384c:	23 30       	cpi	r18, 0x03	; 3
    384e:	31 05       	cpc	r19, r1
    3850:	34 f4       	brge	.+12     	; 0x385e <SET_Direction_4LSB+0x44>
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	9e 81       	ldd	r25, Y+6	; 0x06
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	91 05       	cpc	r25, r1
    385a:	61 f0       	breq	.+24     	; 0x3874 <SET_Direction_4LSB+0x5a>
    385c:	2a c0       	rjmp	.+84     	; 0x38b2 <SET_Direction_4LSB+0x98>
    385e:	2d 81       	ldd	r18, Y+5	; 0x05
    3860:	3e 81       	ldd	r19, Y+6	; 0x06
    3862:	23 30       	cpi	r18, 0x03	; 3
    3864:	31 05       	cpc	r19, r1
    3866:	b1 f0       	breq	.+44     	; 0x3894 <SET_Direction_4LSB+0x7a>
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	84 30       	cpi	r24, 0x04	; 4
    386e:	91 05       	cpc	r25, r1
    3870:	c9 f0       	breq	.+50     	; 0x38a4 <SET_Direction_4LSB+0x8a>
    3872:	1f c0       	rjmp	.+62     	; 0x38b2 <SET_Direction_4LSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0x0F;
    3874:	aa e3       	ldi	r26, 0x3A	; 58
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	ea e3       	ldi	r30, 0x3A	; 58
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	8f 60       	ori	r24, 0x0F	; 15
    3880:	8c 93       	st	X, r24
    3882:	17 c0       	rjmp	.+46     	; 0x38b2 <SET_Direction_4LSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0x0F;
    3884:	a7 e3       	ldi	r26, 0x37	; 55
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e7 e3       	ldi	r30, 0x37	; 55
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	8f 60       	ori	r24, 0x0F	; 15
    3890:	8c 93       	st	X, r24
    3892:	0f c0       	rjmp	.+30     	; 0x38b2 <SET_Direction_4LSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0x0F;
    3894:	a4 e3       	ldi	r26, 0x34	; 52
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e4 e3       	ldi	r30, 0x34	; 52
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	8f 60       	ori	r24, 0x0F	; 15
    38a0:	8c 93       	st	X, r24
    38a2:	07 c0       	rjmp	.+14     	; 0x38b2 <SET_Direction_4LSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0x0F;
    38a4:	a1 e3       	ldi	r26, 0x31	; 49
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e1 e3       	ldi	r30, 0x31	; 49
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	8f 60       	ori	r24, 0x0F	; 15
    38b0:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	88 23       	and	r24, r24
    38b6:	09 f0       	breq	.+2      	; 0x38ba <SET_Direction_4LSB+0xa0>
    38b8:	3f c0       	rjmp	.+126    	; 0x3938 <SET_Direction_4LSB+0x11e>
	{
		switch(Copy_PORT)
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	28 2f       	mov	r18, r24
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	3c 83       	std	Y+4, r19	; 0x04
    38c2:	2b 83       	std	Y+3, r18	; 0x03
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	9c 81       	ldd	r25, Y+4	; 0x04
    38c8:	82 30       	cpi	r24, 0x02	; 2
    38ca:	91 05       	cpc	r25, r1
    38cc:	f1 f0       	breq	.+60     	; 0x390a <SET_Direction_4LSB+0xf0>
    38ce:	2b 81       	ldd	r18, Y+3	; 0x03
    38d0:	3c 81       	ldd	r19, Y+4	; 0x04
    38d2:	23 30       	cpi	r18, 0x03	; 3
    38d4:	31 05       	cpc	r19, r1
    38d6:	34 f4       	brge	.+12     	; 0x38e4 <SET_Direction_4LSB+0xca>
    38d8:	8b 81       	ldd	r24, Y+3	; 0x03
    38da:	9c 81       	ldd	r25, Y+4	; 0x04
    38dc:	81 30       	cpi	r24, 0x01	; 1
    38de:	91 05       	cpc	r25, r1
    38e0:	61 f0       	breq	.+24     	; 0x38fa <SET_Direction_4LSB+0xe0>
    38e2:	2a c0       	rjmp	.+84     	; 0x3938 <SET_Direction_4LSB+0x11e>
    38e4:	2b 81       	ldd	r18, Y+3	; 0x03
    38e6:	3c 81       	ldd	r19, Y+4	; 0x04
    38e8:	23 30       	cpi	r18, 0x03	; 3
    38ea:	31 05       	cpc	r19, r1
    38ec:	b1 f0       	breq	.+44     	; 0x391a <SET_Direction_4LSB+0x100>
    38ee:	8b 81       	ldd	r24, Y+3	; 0x03
    38f0:	9c 81       	ldd	r25, Y+4	; 0x04
    38f2:	84 30       	cpi	r24, 0x04	; 4
    38f4:	91 05       	cpc	r25, r1
    38f6:	c9 f0       	breq	.+50     	; 0x392a <SET_Direction_4LSB+0x110>
    38f8:	1f c0       	rjmp	.+62     	; 0x3938 <SET_Direction_4LSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0xF0;
    38fa:	aa e3       	ldi	r26, 0x3A	; 58
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	ea e3       	ldi	r30, 0x3A	; 58
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	80 7f       	andi	r24, 0xF0	; 240
    3906:	8c 93       	st	X, r24
    3908:	17 c0       	rjmp	.+46     	; 0x3938 <SET_Direction_4LSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0xF0;
    390a:	a7 e3       	ldi	r26, 0x37	; 55
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e7 e3       	ldi	r30, 0x37	; 55
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	80 7f       	andi	r24, 0xF0	; 240
    3916:	8c 93       	st	X, r24
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <SET_Direction_4LSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0xF0;
    391a:	a4 e3       	ldi	r26, 0x34	; 52
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	e4 e3       	ldi	r30, 0x34	; 52
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	80 81       	ld	r24, Z
    3924:	80 7f       	andi	r24, 0xF0	; 240
    3926:	8c 93       	st	X, r24
    3928:	07 c0       	rjmp	.+14     	; 0x3938 <SET_Direction_4LSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0xF0;
    392a:	a1 e3       	ldi	r26, 0x31	; 49
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	e1 e3       	ldi	r30, 0x31	; 49
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	80 7f       	andi	r24, 0xF0	; 240
    3936:	8c 93       	st	X, r24
			break;
		}
	}
}
    3938:	26 96       	adiw	r28, 0x06	; 6
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <SET_Direction_4MSB>:

void SET_Direction_4MSB(u8 Copy_PORT, u8 Direction)//set 4 MSB as input or output
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	00 d0       	rcall	.+0      	; 0x3950 <SET_Direction_4MSB+0x6>
    3950:	00 d0       	rcall	.+0      	; 0x3952 <SET_Direction_4MSB+0x8>
    3952:	00 d0       	rcall	.+0      	; 0x3954 <SET_Direction_4MSB+0xa>
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	89 83       	std	Y+1, r24	; 0x01
    395a:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	81 30       	cpi	r24, 0x01	; 1
    3960:	09 f0       	breq	.+2      	; 0x3964 <SET_Direction_4MSB+0x1a>
    3962:	3f c0       	rjmp	.+126    	; 0x39e2 <SET_Direction_4MSB+0x98>
	{
		switch(Copy_PORT)
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	28 2f       	mov	r18, r24
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	3e 83       	std	Y+6, r19	; 0x06
    396c:	2d 83       	std	Y+5, r18	; 0x05
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	82 30       	cpi	r24, 0x02	; 2
    3974:	91 05       	cpc	r25, r1
    3976:	f1 f0       	breq	.+60     	; 0x39b4 <SET_Direction_4MSB+0x6a>
    3978:	2d 81       	ldd	r18, Y+5	; 0x05
    397a:	3e 81       	ldd	r19, Y+6	; 0x06
    397c:	23 30       	cpi	r18, 0x03	; 3
    397e:	31 05       	cpc	r19, r1
    3980:	34 f4       	brge	.+12     	; 0x398e <SET_Direction_4MSB+0x44>
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	81 30       	cpi	r24, 0x01	; 1
    3988:	91 05       	cpc	r25, r1
    398a:	61 f0       	breq	.+24     	; 0x39a4 <SET_Direction_4MSB+0x5a>
    398c:	2a c0       	rjmp	.+84     	; 0x39e2 <SET_Direction_4MSB+0x98>
    398e:	2d 81       	ldd	r18, Y+5	; 0x05
    3990:	3e 81       	ldd	r19, Y+6	; 0x06
    3992:	23 30       	cpi	r18, 0x03	; 3
    3994:	31 05       	cpc	r19, r1
    3996:	b1 f0       	breq	.+44     	; 0x39c4 <SET_Direction_4MSB+0x7a>
    3998:	8d 81       	ldd	r24, Y+5	; 0x05
    399a:	9e 81       	ldd	r25, Y+6	; 0x06
    399c:	84 30       	cpi	r24, 0x04	; 4
    399e:	91 05       	cpc	r25, r1
    39a0:	c9 f0       	breq	.+50     	; 0x39d4 <SET_Direction_4MSB+0x8a>
    39a2:	1f c0       	rjmp	.+62     	; 0x39e2 <SET_Direction_4MSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0xF0;
    39a4:	aa e3       	ldi	r26, 0x3A	; 58
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	ea e3       	ldi	r30, 0x3A	; 58
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	80 6f       	ori	r24, 0xF0	; 240
    39b0:	8c 93       	st	X, r24
    39b2:	17 c0       	rjmp	.+46     	; 0x39e2 <SET_Direction_4MSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0xF0;
    39b4:	a7 e3       	ldi	r26, 0x37	; 55
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e7 e3       	ldi	r30, 0x37	; 55
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	80 6f       	ori	r24, 0xF0	; 240
    39c0:	8c 93       	st	X, r24
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <SET_Direction_4MSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0xF0;
    39c4:	a4 e3       	ldi	r26, 0x34	; 52
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	e4 e3       	ldi	r30, 0x34	; 52
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	80 6f       	ori	r24, 0xF0	; 240
    39d0:	8c 93       	st	X, r24
    39d2:	07 c0       	rjmp	.+14     	; 0x39e2 <SET_Direction_4MSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0xF0;
    39d4:	a1 e3       	ldi	r26, 0x31	; 49
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	e1 e3       	ldi	r30, 0x31	; 49
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	80 6f       	ori	r24, 0xF0	; 240
    39e0:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
    39e4:	88 23       	and	r24, r24
    39e6:	09 f0       	breq	.+2      	; 0x39ea <SET_Direction_4MSB+0xa0>
    39e8:	3f c0       	rjmp	.+126    	; 0x3a68 <SET_Direction_4MSB+0x11e>
	{
		switch(Copy_PORT)
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	3c 83       	std	Y+4, r19	; 0x04
    39f2:	2b 83       	std	Y+3, r18	; 0x03
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	82 30       	cpi	r24, 0x02	; 2
    39fa:	91 05       	cpc	r25, r1
    39fc:	f1 f0       	breq	.+60     	; 0x3a3a <SET_Direction_4MSB+0xf0>
    39fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3a00:	3c 81       	ldd	r19, Y+4	; 0x04
    3a02:	23 30       	cpi	r18, 0x03	; 3
    3a04:	31 05       	cpc	r19, r1
    3a06:	34 f4       	brge	.+12     	; 0x3a14 <SET_Direction_4MSB+0xca>
    3a08:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0c:	81 30       	cpi	r24, 0x01	; 1
    3a0e:	91 05       	cpc	r25, r1
    3a10:	61 f0       	breq	.+24     	; 0x3a2a <SET_Direction_4MSB+0xe0>
    3a12:	2a c0       	rjmp	.+84     	; 0x3a68 <SET_Direction_4MSB+0x11e>
    3a14:	2b 81       	ldd	r18, Y+3	; 0x03
    3a16:	3c 81       	ldd	r19, Y+4	; 0x04
    3a18:	23 30       	cpi	r18, 0x03	; 3
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	b1 f0       	breq	.+44     	; 0x3a4a <SET_Direction_4MSB+0x100>
    3a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a20:	9c 81       	ldd	r25, Y+4	; 0x04
    3a22:	84 30       	cpi	r24, 0x04	; 4
    3a24:	91 05       	cpc	r25, r1
    3a26:	c9 f0       	breq	.+50     	; 0x3a5a <SET_Direction_4MSB+0x110>
    3a28:	1f c0       	rjmp	.+62     	; 0x3a68 <SET_Direction_4MSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0x0F;
    3a2a:	aa e3       	ldi	r26, 0x3A	; 58
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	ea e3       	ldi	r30, 0x3A	; 58
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	8f 70       	andi	r24, 0x0F	; 15
    3a36:	8c 93       	st	X, r24
    3a38:	17 c0       	rjmp	.+46     	; 0x3a68 <SET_Direction_4MSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0x0F;
    3a3a:	a7 e3       	ldi	r26, 0x37	; 55
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e7 e3       	ldi	r30, 0x37	; 55
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	8f 70       	andi	r24, 0x0F	; 15
    3a46:	8c 93       	st	X, r24
    3a48:	0f c0       	rjmp	.+30     	; 0x3a68 <SET_Direction_4MSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0x0F;
    3a4a:	a4 e3       	ldi	r26, 0x34	; 52
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	e4 e3       	ldi	r30, 0x34	; 52
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	8f 70       	andi	r24, 0x0F	; 15
    3a56:	8c 93       	st	X, r24
    3a58:	07 c0       	rjmp	.+14     	; 0x3a68 <SET_Direction_4MSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0x0F;
    3a5a:	a1 e3       	ldi	r26, 0x31	; 49
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	e1 e3       	ldi	r30, 0x31	; 49
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	80 81       	ld	r24, Z
    3a64:	8f 70       	andi	r24, 0x0F	; 15
    3a66:	8c 93       	st	X, r24
			break;
		}
	}
}
    3a68:	26 96       	adiw	r28, 0x06	; 6
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <SET_State_4LSB>:

void SET_State_4LSB(u8 Copy_PORT, u8 State)//set 4LSB output pins as high or low
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <SET_State_4LSB+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <SET_State_4LSB+0x8>
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <SET_State_4LSB+0xa>
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    3a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8e:	81 30       	cpi	r24, 0x01	; 1
    3a90:	09 f0       	breq	.+2      	; 0x3a94 <SET_State_4LSB+0x1a>
    3a92:	40 c0       	rjmp	.+128    	; 0x3b14 <SET_State_4LSB+0x9a>
	{
		switch(Copy_PORT)
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	28 2f       	mov	r18, r24
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	3e 83       	std	Y+6, r19	; 0x06
    3a9c:	2d 83       	std	Y+5, r18	; 0x05
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	82 30       	cpi	r24, 0x02	; 2
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	f1 f0       	breq	.+60     	; 0x3ae4 <SET_State_4LSB+0x6a>
    3aa8:	2d 81       	ldd	r18, Y+5	; 0x05
    3aaa:	3e 81       	ldd	r19, Y+6	; 0x06
    3aac:	23 30       	cpi	r18, 0x03	; 3
    3aae:	31 05       	cpc	r19, r1
    3ab0:	34 f4       	brge	.+12     	; 0x3abe <SET_State_4LSB+0x44>
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	91 05       	cpc	r25, r1
    3aba:	61 f0       	breq	.+24     	; 0x3ad4 <SET_State_4LSB+0x5a>
    3abc:	6e c0       	rjmp	.+220    	; 0x3b9a <SET_State_4LSB+0x120>
    3abe:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ac2:	23 30       	cpi	r18, 0x03	; 3
    3ac4:	31 05       	cpc	r19, r1
    3ac6:	b1 f0       	breq	.+44     	; 0x3af4 <SET_State_4LSB+0x7a>
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	9e 81       	ldd	r25, Y+6	; 0x06
    3acc:	84 30       	cpi	r24, 0x04	; 4
    3ace:	91 05       	cpc	r25, r1
    3ad0:	c9 f0       	breq	.+50     	; 0x3b04 <SET_State_4LSB+0x8a>
    3ad2:	63 c0       	rjmp	.+198    	; 0x3b9a <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0x0F;
    3ad4:	ab e3       	ldi	r26, 0x3B	; 59
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	eb e3       	ldi	r30, 0x3B	; 59
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	80 81       	ld	r24, Z
    3ade:	8f 60       	ori	r24, 0x0F	; 15
    3ae0:	8c 93       	st	X, r24
    3ae2:	5b c0       	rjmp	.+182    	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0x0F;
    3ae4:	a8 e3       	ldi	r26, 0x38	; 56
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e8 e3       	ldi	r30, 0x38	; 56
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	8f 60       	ori	r24, 0x0F	; 15
    3af0:	8c 93       	st	X, r24
    3af2:	53 c0       	rjmp	.+166    	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0x0F;
    3af4:	a5 e3       	ldi	r26, 0x35	; 53
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e5 e3       	ldi	r30, 0x35	; 53
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	8f 60       	ori	r24, 0x0F	; 15
    3b00:	8c 93       	st	X, r24
    3b02:	4b c0       	rjmp	.+150    	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0x0F;
    3b04:	a2 e3       	ldi	r26, 0x32	; 50
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e2 e3       	ldi	r30, 0x32	; 50
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	8f 60       	ori	r24, 0x0F	; 15
    3b10:	8c 93       	st	X, r24
    3b12:	43 c0       	rjmp	.+134    	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	88 23       	and	r24, r24
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <SET_State_4LSB+0xa2>
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <SET_State_4LSB+0x120>
	{
		switch(Copy_PORT)
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	3c 83       	std	Y+4, r19	; 0x04
    3b24:	2b 83       	std	Y+3, r18	; 0x03
    3b26:	8b 81       	ldd	r24, Y+3	; 0x03
    3b28:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2a:	82 30       	cpi	r24, 0x02	; 2
    3b2c:	91 05       	cpc	r25, r1
    3b2e:	f1 f0       	breq	.+60     	; 0x3b6c <SET_State_4LSB+0xf2>
    3b30:	2b 81       	ldd	r18, Y+3	; 0x03
    3b32:	3c 81       	ldd	r19, Y+4	; 0x04
    3b34:	23 30       	cpi	r18, 0x03	; 3
    3b36:	31 05       	cpc	r19, r1
    3b38:	34 f4       	brge	.+12     	; 0x3b46 <SET_State_4LSB+0xcc>
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3e:	81 30       	cpi	r24, 0x01	; 1
    3b40:	91 05       	cpc	r25, r1
    3b42:	61 f0       	breq	.+24     	; 0x3b5c <SET_State_4LSB+0xe2>
    3b44:	2a c0       	rjmp	.+84     	; 0x3b9a <SET_State_4LSB+0x120>
    3b46:	2b 81       	ldd	r18, Y+3	; 0x03
    3b48:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4a:	23 30       	cpi	r18, 0x03	; 3
    3b4c:	31 05       	cpc	r19, r1
    3b4e:	b1 f0       	breq	.+44     	; 0x3b7c <SET_State_4LSB+0x102>
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	9c 81       	ldd	r25, Y+4	; 0x04
    3b54:	84 30       	cpi	r24, 0x04	; 4
    3b56:	91 05       	cpc	r25, r1
    3b58:	c9 f0       	breq	.+50     	; 0x3b8c <SET_State_4LSB+0x112>
    3b5a:	1f c0       	rjmp	.+62     	; 0x3b9a <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0xF0;
    3b5c:	ab e3       	ldi	r26, 0x3B	; 59
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	eb e3       	ldi	r30, 0x3B	; 59
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	80 7f       	andi	r24, 0xF0	; 240
    3b68:	8c 93       	st	X, r24
    3b6a:	17 c0       	rjmp	.+46     	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0xF0;
    3b6c:	a8 e3       	ldi	r26, 0x38	; 56
    3b6e:	b0 e0       	ldi	r27, 0x00	; 0
    3b70:	e8 e3       	ldi	r30, 0x38	; 56
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	80 81       	ld	r24, Z
    3b76:	80 7f       	andi	r24, 0xF0	; 240
    3b78:	8c 93       	st	X, r24
    3b7a:	0f c0       	rjmp	.+30     	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0xF0;
    3b7c:	a5 e3       	ldi	r26, 0x35	; 53
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e5 e3       	ldi	r30, 0x35	; 53
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	80 7f       	andi	r24, 0xF0	; 240
    3b88:	8c 93       	st	X, r24
    3b8a:	07 c0       	rjmp	.+14     	; 0x3b9a <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0xF0;
    3b8c:	a2 e3       	ldi	r26, 0x32	; 50
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	e2 e3       	ldi	r30, 0x32	; 50
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	80 7f       	andi	r24, 0xF0	; 240
    3b98:	8c 93       	st	X, r24
			break;
		}
	}
}
    3b9a:	26 96       	adiw	r28, 0x06	; 6
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	08 95       	ret

00003bac <SET_State_4MSB>:

void SET_State_4MSB(u8 Copy_PORT, u8 State)//set 4MSB output pins as high or low
{
    3bac:	df 93       	push	r29
    3bae:	cf 93       	push	r28
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <SET_State_4MSB+0x6>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <SET_State_4MSB+0x8>
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <SET_State_4MSB+0xa>
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    3bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc0:	81 30       	cpi	r24, 0x01	; 1
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <SET_State_4MSB+0x1a>
    3bc4:	40 c0       	rjmp	.+128    	; 0x3c46 <SET_State_4MSB+0x9a>
	{
		switch(Copy_PORT)
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	28 2f       	mov	r18, r24
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	3e 83       	std	Y+6, r19	; 0x06
    3bce:	2d 83       	std	Y+5, r18	; 0x05
    3bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd4:	82 30       	cpi	r24, 0x02	; 2
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	f1 f0       	breq	.+60     	; 0x3c16 <SET_State_4MSB+0x6a>
    3bda:	2d 81       	ldd	r18, Y+5	; 0x05
    3bdc:	3e 81       	ldd	r19, Y+6	; 0x06
    3bde:	23 30       	cpi	r18, 0x03	; 3
    3be0:	31 05       	cpc	r19, r1
    3be2:	34 f4       	brge	.+12     	; 0x3bf0 <SET_State_4MSB+0x44>
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	81 30       	cpi	r24, 0x01	; 1
    3bea:	91 05       	cpc	r25, r1
    3bec:	61 f0       	breq	.+24     	; 0x3c06 <SET_State_4MSB+0x5a>
    3bee:	6e c0       	rjmp	.+220    	; 0x3ccc <SET_State_4MSB+0x120>
    3bf0:	2d 81       	ldd	r18, Y+5	; 0x05
    3bf2:	3e 81       	ldd	r19, Y+6	; 0x06
    3bf4:	23 30       	cpi	r18, 0x03	; 3
    3bf6:	31 05       	cpc	r19, r1
    3bf8:	b1 f0       	breq	.+44     	; 0x3c26 <SET_State_4MSB+0x7a>
    3bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfe:	84 30       	cpi	r24, 0x04	; 4
    3c00:	91 05       	cpc	r25, r1
    3c02:	c9 f0       	breq	.+50     	; 0x3c36 <SET_State_4MSB+0x8a>
    3c04:	63 c0       	rjmp	.+198    	; 0x3ccc <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0xF0;
    3c06:	ab e3       	ldi	r26, 0x3B	; 59
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	eb e3       	ldi	r30, 0x3B	; 59
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	80 6f       	ori	r24, 0xF0	; 240
    3c12:	8c 93       	st	X, r24
    3c14:	5b c0       	rjmp	.+182    	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0xF0;
    3c16:	a8 e3       	ldi	r26, 0x38	; 56
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e8 e3       	ldi	r30, 0x38	; 56
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	80 6f       	ori	r24, 0xF0	; 240
    3c22:	8c 93       	st	X, r24
    3c24:	53 c0       	rjmp	.+166    	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0xF0;
    3c26:	a5 e3       	ldi	r26, 0x35	; 53
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e5 e3       	ldi	r30, 0x35	; 53
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	80 6f       	ori	r24, 0xF0	; 240
    3c32:	8c 93       	st	X, r24
    3c34:	4b c0       	rjmp	.+150    	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0xF0;
    3c36:	a2 e3       	ldi	r26, 0x32	; 50
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e2 e3       	ldi	r30, 0x32	; 50
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	80 6f       	ori	r24, 0xF0	; 240
    3c42:	8c 93       	st	X, r24
    3c44:	43 c0       	rjmp	.+134    	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	88 23       	and	r24, r24
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <SET_State_4MSB+0xa2>
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <SET_State_4MSB+0x120>
	{
		switch(Copy_PORT)
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	28 2f       	mov	r18, r24
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	3c 83       	std	Y+4, r19	; 0x04
    3c56:	2b 83       	std	Y+3, r18	; 0x03
    3c58:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5c:	82 30       	cpi	r24, 0x02	; 2
    3c5e:	91 05       	cpc	r25, r1
    3c60:	f1 f0       	breq	.+60     	; 0x3c9e <SET_State_4MSB+0xf2>
    3c62:	2b 81       	ldd	r18, Y+3	; 0x03
    3c64:	3c 81       	ldd	r19, Y+4	; 0x04
    3c66:	23 30       	cpi	r18, 0x03	; 3
    3c68:	31 05       	cpc	r19, r1
    3c6a:	34 f4       	brge	.+12     	; 0x3c78 <SET_State_4MSB+0xcc>
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c70:	81 30       	cpi	r24, 0x01	; 1
    3c72:	91 05       	cpc	r25, r1
    3c74:	61 f0       	breq	.+24     	; 0x3c8e <SET_State_4MSB+0xe2>
    3c76:	2a c0       	rjmp	.+84     	; 0x3ccc <SET_State_4MSB+0x120>
    3c78:	2b 81       	ldd	r18, Y+3	; 0x03
    3c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c7c:	23 30       	cpi	r18, 0x03	; 3
    3c7e:	31 05       	cpc	r19, r1
    3c80:	b1 f0       	breq	.+44     	; 0x3cae <SET_State_4MSB+0x102>
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	84 30       	cpi	r24, 0x04	; 4
    3c88:	91 05       	cpc	r25, r1
    3c8a:	c9 f0       	breq	.+50     	; 0x3cbe <SET_State_4MSB+0x112>
    3c8c:	1f c0       	rjmp	.+62     	; 0x3ccc <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0x0F;
    3c8e:	ab e3       	ldi	r26, 0x3B	; 59
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	eb e3       	ldi	r30, 0x3B	; 59
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	8f 70       	andi	r24, 0x0F	; 15
    3c9a:	8c 93       	st	X, r24
    3c9c:	17 c0       	rjmp	.+46     	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0x0F;
    3c9e:	a8 e3       	ldi	r26, 0x38	; 56
    3ca0:	b0 e0       	ldi	r27, 0x00	; 0
    3ca2:	e8 e3       	ldi	r30, 0x38	; 56
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	80 81       	ld	r24, Z
    3ca8:	8f 70       	andi	r24, 0x0F	; 15
    3caa:	8c 93       	st	X, r24
    3cac:	0f c0       	rjmp	.+30     	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0x0F;
    3cae:	a5 e3       	ldi	r26, 0x35	; 53
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
    3cb2:	e5 e3       	ldi	r30, 0x35	; 53
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	80 81       	ld	r24, Z
    3cb8:	8f 70       	andi	r24, 0x0F	; 15
    3cba:	8c 93       	st	X, r24
    3cbc:	07 c0       	rjmp	.+14     	; 0x3ccc <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0x0F;
    3cbe:	a2 e3       	ldi	r26, 0x32	; 50
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	e2 e3       	ldi	r30, 0x32	; 50
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	8f 70       	andi	r24, 0x0F	; 15
    3cca:	8c 93       	st	X, r24
			break;
		}
	}
}
    3ccc:	26 96       	adiw	r28, 0x06	; 6
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	de bf       	out	0x3e, r29	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	cd bf       	out	0x3d, r28	; 61
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	08 95       	ret

00003cde <__udivmodhi4>:
    3cde:	aa 1b       	sub	r26, r26
    3ce0:	bb 1b       	sub	r27, r27
    3ce2:	51 e1       	ldi	r21, 0x11	; 17
    3ce4:	07 c0       	rjmp	.+14     	; 0x3cf4 <__udivmodhi4_ep>

00003ce6 <__udivmodhi4_loop>:
    3ce6:	aa 1f       	adc	r26, r26
    3ce8:	bb 1f       	adc	r27, r27
    3cea:	a6 17       	cp	r26, r22
    3cec:	b7 07       	cpc	r27, r23
    3cee:	10 f0       	brcs	.+4      	; 0x3cf4 <__udivmodhi4_ep>
    3cf0:	a6 1b       	sub	r26, r22
    3cf2:	b7 0b       	sbc	r27, r23

00003cf4 <__udivmodhi4_ep>:
    3cf4:	88 1f       	adc	r24, r24
    3cf6:	99 1f       	adc	r25, r25
    3cf8:	5a 95       	dec	r21
    3cfa:	a9 f7       	brne	.-22     	; 0x3ce6 <__udivmodhi4_loop>
    3cfc:	80 95       	com	r24
    3cfe:	90 95       	com	r25
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	08 95       	ret

00003d06 <__prologue_saves__>:
    3d06:	2f 92       	push	r2
    3d08:	3f 92       	push	r3
    3d0a:	4f 92       	push	r4
    3d0c:	5f 92       	push	r5
    3d0e:	6f 92       	push	r6
    3d10:	7f 92       	push	r7
    3d12:	8f 92       	push	r8
    3d14:	9f 92       	push	r9
    3d16:	af 92       	push	r10
    3d18:	bf 92       	push	r11
    3d1a:	cf 92       	push	r12
    3d1c:	df 92       	push	r13
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	ca 1b       	sub	r28, r26
    3d30:	db 0b       	sbc	r29, r27
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	09 94       	ijmp

00003d3e <__epilogue_restores__>:
    3d3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d40:	39 88       	ldd	r3, Y+17	; 0x11
    3d42:	48 88       	ldd	r4, Y+16	; 0x10
    3d44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d50:	b9 84       	ldd	r11, Y+9	; 0x09
    3d52:	c8 84       	ldd	r12, Y+8	; 0x08
    3d54:	df 80       	ldd	r13, Y+7	; 0x07
    3d56:	ee 80       	ldd	r14, Y+6	; 0x06
    3d58:	fd 80       	ldd	r15, Y+5	; 0x05
    3d5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d60:	b9 81       	ldd	r27, Y+1	; 0x01
    3d62:	ce 0f       	add	r28, r30
    3d64:	d1 1d       	adc	r29, r1
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	ed 01       	movw	r28, r26
    3d72:	08 95       	ret

00003d74 <_exit>:
    3d74:	f8 94       	cli

00003d76 <__stop_program>:
    3d76:	ff cf       	rjmp	.-2      	; 0x3d76 <__stop_program>
